package net.jazdw.jnacan.c;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;

import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.globals.GlobalInt;
import com.ochafik.lang.jnaerator.runtime.globals.GlobalPointerType;
import com.sun.jna.*;
import com.sun.jna.ptr.ByteByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
/**
 * JNA Wrapper for library <b>c</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = (com.sun.jna.Platform.isWindows() ? "msvcrt" : "c");
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(CLibrary.JNA_LIBRARY_NAME);
	public static final CLibrary INSTANCE = (CLibrary)Native.loadLibrary(CLibrary.JNA_LIBRARY_NAME, CLibrary.class);
	/**
	 * Types of sockets.<br>
	 * <i>native declaration : bits/socket.h:9</i><br>
	 * enum values
	 */
	public static interface __socket_type {
		/**
		 * Sequenced, reliable, connection-based<br>
		 * byte streams.<br>
		 * <i>native declaration : bits/socket.h:11</i>
		 */
		public static final int SOCK_STREAM = 1;
		/**
		 * Connectionless, unreliable datagrams<br>
		 * of fixed maximum length.<br>
		 * <i>native declaration : bits/socket.h:14</i>
		 */
		public static final int SOCK_DGRAM = 2;
		/**
		 * Raw protocol interface.<br>
		 * <i>native declaration : bits/socket.h:17</i>
		 */
		public static final int SOCK_RAW = 3;
		/**
		 * Reliably-delivered messages.<br>
		 * <i>native declaration : bits/socket.h:19</i>
		 */
		public static final int SOCK_RDM = 4;
		/**
		 * Sequenced, reliable, connection-based,<br>
		 * datagrams of fixed maximum length.<br>
		 * <i>native declaration : bits/socket.h:21</i>
		 */
		public static final int SOCK_SEQPACKET = 5;
		/**
		 * Datagram Congestion Control Protocol.<br>
		 * <i>native declaration : bits/socket.h:24</i>
		 */
		public static final int SOCK_DCCP = 6;
		/**
		 * Linux specific way of getting packets<br>
		 * at the dev level.  For writing rarp and<br>
		 * other similar things on the user level.<br>
		 * <i>native declaration : bits/socket.h:26</i>
		 */
		public static final int SOCK_PACKET = 10;
		/**
		 * Atomically set close-on-exec flag for the<br>
		 * new descriptor(s).<br>
		 * <i>native declaration : bits/socket.h:34</i>
		 */
		public static final int SOCK_CLOEXEC = 2000000;
		/**
		 * Atomically mark descriptor(s) as<br>
		 * non-blocking.<br>
		 * <i>native declaration : bits/socket.h:37</i>
		 */
		public static final int SOCK_NONBLOCK = 4000;
	};
	/** Process out-of-band data. */
	public static final int MSG_OOB = 0x01;
	/** Peek at incoming messages. */
	public static final int MSG_PEEK = 0x02;
	/** Don't use local routing. */
	public static final int MSG_DONTROUTE = 0x04;
	/** Control data lost before delivery. */
	public static final int MSG_CTRUNC = 0x08;
	/** Supply or ask second address. */
	public static final int MSG_PROXY = 0x10;
	public static final int MSG_TRUNC = 0x20;
	/** Nonblocking IO. */
	public static final int MSG_DONTWAIT = 0x40;
	/** End of record. */
	public static final int MSG_EOR = 0x80;
	/** Wait for a full request. */
	public static final int MSG_WAITALL = 0x100;
	public static final int MSG_FIN = 0x200;
	public static final int MSG_SYN = 0x400;
	/** Confirm path validity. */
	public static final int MSG_CONFIRM = 0x800;
	public static final int MSG_RST = 0x1000;
	/** Fetch message from error queue. */
	public static final int MSG_ERRQUEUE = 0x2000;
	/** Do not generate SIGPIPE. */
	public static final int MSG_NOSIGNAL = 0x4000;
	/** Sender will send more. */
	public static final int MSG_MORE = 0x8000;
	/** Wait for at least one packet to return. */
	public static final int MSG_WAITFORONE = 0x10000;
	/**
	 * Set close_on_exit for file<br>
	 * descriptor received through<br>
	 * SCM_RIGHTS.
	 */
	public static final int MSG_CMSG_CLOEXEC = 0x40000000;
	/** Transfer file descriptors. */
	public static final int SCM_RIGHTS = 0x01;
	/** No more receptions. */
	public static final int SHUT_RD = 0;
	/** No more transmissions. */
	public static final int SHUT_WR = 1;
	/** No more receptions or transmissions. */
	public static final int SHUT_RDWR = 2;
	/** Interface is up. */
	public static final int IFF_UP = 0x1;
	/** Broadcast address valid. */
	public static final int IFF_BROADCAST = 0x2;
	/** Turn on debugging. */
	public static final int IFF_DEBUG = 0x4;
	/** Is a loopback net. */
	public static final int IFF_LOOPBACK = 0x8;
	/** Interface is point-to-point link. */
	public static final int IFF_POINTOPOINT = 0x10;
	/** Avoid use of trailers. */
	public static final int IFF_NOTRAILERS = 0x20;
	/** Resources allocated. */
	public static final int IFF_RUNNING = 0x40;
	/** No address resolution protocol. */
	public static final int IFF_NOARP = 0x80;
	/** Receive all packets. */
	public static final int IFF_PROMISC = 0x100;
	/**
	 * Not supported<br>
	 * Receive all multicast packets.
	 */
	public static final int IFF_ALLMULTI = 0x200;
	/** Master of a load balancer. */
	public static final int IFF_MASTER = 0x400;
	/** Slave of a load balancer. */
	public static final int IFF_SLAVE = 0x800;
	/** Supports multicast. */
	public static final int IFF_MULTICAST = 0x1000;
	/** Can set media type. */
	public static final int IFF_PORTSEL = 0x2000;
	/** Auto media select active. */
	public static final int IFF_AUTOMEDIA = 0x4000;
	/** Dialup device with changing addresses. */
	public static final int IFF_DYNAMIC = 0x8000;
	public static final int _PC_LINK_MAX = 0;
	public static final int _PC_MAX_CANON = 1;
	public static final int _PC_MAX_INPUT = 2;
	public static final int _PC_NAME_MAX = 3;
	public static final int _PC_PATH_MAX = 4;
	public static final int _PC_PIPE_BUF = 5;
	public static final int _PC_CHOWN_RESTRICTED = 6;
	public static final int _PC_NO_TRUNC = 7;
	public static final int _PC_VDISABLE = 8;
	public static final int _PC_SYNC_IO = 9;
	public static final int _PC_ASYNC_IO = 10;
	public static final int _PC_PRIO_IO = 11;
	public static final int _PC_SOCK_MAXBUF = 12;
	public static final int _PC_FILESIZEBITS = 13;
	public static final int _PC_REC_INCR_XFER_SIZE = 14;
	public static final int _PC_REC_MAX_XFER_SIZE = 15;
	public static final int _PC_REC_MIN_XFER_SIZE = 16;
	public static final int _PC_REC_XFER_ALIGN = 17;
	public static final int _PC_ALLOC_SIZE_MIN = 18;
	public static final int _PC_SYMLINK_MAX = 19;
	public static final int _PC_2_SYMLINKS = 20;
	public static final int _SC_ARG_MAX = 0;
	public static final int _SC_CHILD_MAX = 1;
	public static final int _SC_CLK_TCK = 2;
	public static final int _SC_NGROUPS_MAX = 3;
	public static final int _SC_OPEN_MAX = 4;
	public static final int _SC_STREAM_MAX = 5;
	public static final int _SC_TZNAME_MAX = 6;
	public static final int _SC_JOB_CONTROL = 7;
	public static final int _SC_SAVED_IDS = 8;
	public static final int _SC_REALTIME_SIGNALS = 9;
	public static final int _SC_PRIORITY_SCHEDULING = 10;
	public static final int _SC_TIMERS = 11;
	public static final int _SC_ASYNCHRONOUS_IO = 12;
	public static final int _SC_PRIORITIZED_IO = 13;
	public static final int _SC_SYNCHRONIZED_IO = 14;
	public static final int _SC_FSYNC = 15;
	public static final int _SC_MAPPED_FILES = 16;
	public static final int _SC_MEMLOCK = 17;
	public static final int _SC_MEMLOCK_RANGE = 18;
	public static final int _SC_MEMORY_PROTECTION = 19;
	public static final int _SC_MESSAGE_PASSING = 20;
	public static final int _SC_SEMAPHORES = 21;
	public static final int _SC_SHARED_MEMORY_OBJECTS = 22;
	public static final int _SC_AIO_LISTIO_MAX = 23;
	public static final int _SC_AIO_MAX = 24;
	public static final int _SC_AIO_PRIO_DELTA_MAX = 25;
	public static final int _SC_DELAYTIMER_MAX = 26;
	public static final int _SC_MQ_OPEN_MAX = 27;
	public static final int _SC_MQ_PRIO_MAX = 28;
	public static final int _SC_VERSION = 29;
	public static final int _SC_PAGESIZE = 30;
	public static final int _SC_RTSIG_MAX = 31;
	public static final int _SC_SEM_NSEMS_MAX = 32;
	public static final int _SC_SEM_VALUE_MAX = 33;
	public static final int _SC_SIGQUEUE_MAX = 34;
	public static final int _SC_TIMER_MAX = 35;
	/**
	 * Values for the argument to `sysconf'<br>
	 * corresponding to _POSIX2_* symbols.
	 */
	public static final int _SC_BC_BASE_MAX = 36;
	public static final int _SC_BC_DIM_MAX = 37;
	public static final int _SC_BC_SCALE_MAX = 38;
	public static final int _SC_BC_STRING_MAX = 39;
	public static final int _SC_COLL_WEIGHTS_MAX = 40;
	public static final int _SC_EQUIV_CLASS_MAX = 41;
	public static final int _SC_EXPR_NEST_MAX = 42;
	public static final int _SC_LINE_MAX = 43;
	public static final int _SC_RE_DUP_MAX = 44;
	public static final int _SC_CHARCLASS_NAME_MAX = 45;
	public static final int _SC_2_VERSION = 46;
	public static final int _SC_2_C_BIND = 47;
	public static final int _SC_2_C_DEV = 48;
	public static final int _SC_2_FORT_DEV = 49;
	public static final int _SC_2_FORT_RUN = 50;
	public static final int _SC_2_SW_DEV = 51;
	public static final int _SC_2_LOCALEDEF = 52;
	public static final int _SC_PII = 53;
	public static final int _SC_PII_XTI = 54;
	public static final int _SC_PII_SOCKET = 55;
	public static final int _SC_PII_INTERNET = 56;
	public static final int _SC_PII_OSI = 57;
	public static final int _SC_POLL = 58;
	public static final int _SC_SELECT = 59;
	public static final int _SC_UIO_MAXIOV = 60;
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:203</i><br>
	 * _SC_IOV_MAX = _SC_UIO_MAXIOV
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:205</i><br>
	 * _SC_PII_INTERNET_STREAM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:207</i><br>
	 * _SC_PII_INTERNET_DGRAM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:209</i><br>
	 * _SC_PII_OSI_COTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:211</i><br>
	 * _SC_PII_OSI_CLTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:213</i><br>
	 * _SC_PII_OSI_M
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:215</i><br>
	 * _SC_T_IOV_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * Values according to POSIX 1003.1c (POSIX threads).<br>
	 * <i>native declaration : bits/confname.h:219</i><br>
	 * Values according to POSIX 1003.1c (POSIX threads). * /<br>
	 * _SC_THREADS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:221</i><br>
	 * _SC_THREAD_SAFE_FUNCTIONS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:223</i><br>
	 * _SC_GETGR_R_SIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:225</i><br>
	 * _SC_GETPW_R_SIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:227</i><br>
	 * _SC_LOGIN_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:229</i><br>
	 * _SC_TTY_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:231</i><br>
	 * _SC_THREAD_DESTRUCTOR_ITERATIONS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:233</i><br>
	 * _SC_THREAD_KEYS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:235</i><br>
	 * _SC_THREAD_STACK_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:237</i><br>
	 * _SC_THREAD_THREADS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:239</i><br>
	 * _SC_THREAD_ATTR_STACKADDR
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:241</i><br>
	 * _SC_THREAD_ATTR_STACKSIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:243</i><br>
	 * _SC_THREAD_PRIORITY_SCHEDULING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:245</i><br>
	 * _SC_THREAD_PRIO_INHERIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:247</i><br>
	 * _SC_THREAD_PRIO_PROTECT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:249</i><br>
	 * _SC_THREAD_PROCESS_SHARED
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:252</i><br>
	 * _SC_NPROCESSORS_CONF
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:254</i><br>
	 * _SC_NPROCESSORS_ONLN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:256</i><br>
	 * _SC_PHYS_PAGES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:258</i><br>
	 * _SC_AVPHYS_PAGES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:260</i><br>
	 * _SC_ATEXIT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:262</i><br>
	 * _SC_PASS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:265</i><br>
	 * _SC_XOPEN_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:267</i><br>
	 * _SC_XOPEN_XCU_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:269</i><br>
	 * _SC_XOPEN_UNIX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:271</i><br>
	 * _SC_XOPEN_CRYPT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:273</i><br>
	 * _SC_XOPEN_ENH_I18N
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:275</i><br>
	 * _SC_XOPEN_SHM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:278</i><br>
	 * _SC_2_CHAR_TERM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:280</i><br>
	 * _SC_2_C_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:282</i><br>
	 * _SC_2_UPE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:285</i><br>
	 * _SC_XOPEN_XPG2
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:287</i><br>
	 * _SC_XOPEN_XPG3
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:289</i><br>
	 * _SC_XOPEN_XPG4
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:292</i><br>
	 * _SC_CHAR_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:294</i><br>
	 * _SC_CHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:296</i><br>
	 * _SC_CHAR_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:298</i><br>
	 * _SC_INT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:300</i><br>
	 * _SC_INT_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:302</i><br>
	 * _SC_LONG_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:304</i><br>
	 * _SC_WORD_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:306</i><br>
	 * _SC_MB_LEN_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:308</i><br>
	 * _SC_NZERO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:310</i><br>
	 * _SC_SSIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:312</i><br>
	 * _SC_SCHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:314</i><br>
	 * _SC_SCHAR_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:316</i><br>
	 * _SC_SHRT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:318</i><br>
	 * _SC_SHRT_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:320</i><br>
	 * _SC_UCHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:322</i><br>
	 * _SC_UINT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:324</i><br>
	 * _SC_ULONG_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:326</i><br>
	 * _SC_USHRT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:329</i><br>
	 * _SC_NL_ARGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:331</i><br>
	 * _SC_NL_LANGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:333</i><br>
	 * _SC_NL_MSGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:335</i><br>
	 * _SC_NL_NMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:337</i><br>
	 * _SC_NL_SETMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:339</i><br>
	 * _SC_NL_TEXTMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:342</i><br>
	 * _SC_XBS5_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:344</i><br>
	 * _SC_XBS5_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:346</i><br>
	 * _SC_XBS5_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:348</i><br>
	 * _SC_XBS5_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:351</i><br>
	 * _SC_XOPEN_LEGACY
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:353</i><br>
	 * _SC_XOPEN_REALTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:355</i><br>
	 * _SC_XOPEN_REALTIME_THREADS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:358</i><br>
	 * _SC_ADVISORY_INFO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:360</i><br>
	 * _SC_BARRIERS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:362</i><br>
	 * _SC_BASE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:364</i><br>
	 * _SC_C_LANG_SUPPORT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:366</i><br>
	 * _SC_C_LANG_SUPPORT_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:368</i><br>
	 * _SC_CLOCK_SELECTION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:370</i><br>
	 * _SC_CPUTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:372</i><br>
	 * _SC_THREAD_CPUTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:374</i><br>
	 * _SC_DEVICE_IO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:376</i><br>
	 * _SC_DEVICE_SPECIFIC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:378</i><br>
	 * _SC_DEVICE_SPECIFIC_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:380</i><br>
	 * _SC_FD_MGMT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:382</i><br>
	 * _SC_FIFO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:384</i><br>
	 * _SC_PIPE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:386</i><br>
	 * _SC_FILE_ATTRIBUTES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:388</i><br>
	 * _SC_FILE_LOCKING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:390</i><br>
	 * _SC_FILE_SYSTEM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:392</i><br>
	 * _SC_MONOTONIC_CLOCK
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:394</i><br>
	 * _SC_MULTI_PROCESS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:396</i><br>
	 * _SC_SINGLE_PROCESS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:398</i><br>
	 * _SC_NETWORKING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:400</i><br>
	 * _SC_READER_WRITER_LOCKS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:402</i><br>
	 * _SC_SPIN_LOCKS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:404</i><br>
	 * _SC_REGEXP
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:406</i><br>
	 * _SC_REGEX_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:408</i><br>
	 * _SC_SHELL
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:410</i><br>
	 * _SC_SIGNALS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:412</i><br>
	 * _SC_SPAWN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:414</i><br>
	 * _SC_SPORADIC_SERVER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:416</i><br>
	 * _SC_THREAD_SPORADIC_SERVER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:418</i><br>
	 * _SC_SYSTEM_DATABASE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:420</i><br>
	 * _SC_SYSTEM_DATABASE_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:422</i><br>
	 * _SC_TIMEOUTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:424</i><br>
	 * _SC_TYPED_MEMORY_OBJECTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:426</i><br>
	 * _SC_USER_GROUPS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:428</i><br>
	 * _SC_USER_GROUPS_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:430</i><br>
	 * _SC_2_PBS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:432</i><br>
	 * _SC_2_PBS_ACCOUNTING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:434</i><br>
	 * _SC_2_PBS_LOCATE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:436</i><br>
	 * _SC_2_PBS_MESSAGE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:438</i><br>
	 * _SC_2_PBS_TRACK
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:440</i><br>
	 * _SC_SYMLOOP_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:442</i><br>
	 * _SC_STREAMS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:444</i><br>
	 * _SC_2_PBS_CHECKPOINT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:447</i><br>
	 * _SC_V6_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:449</i><br>
	 * _SC_V6_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:451</i><br>
	 * _SC_V6_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:453</i><br>
	 * _SC_V6_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:456</i><br>
	 * _SC_HOST_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:458</i><br>
	 * _SC_TRACE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:460</i><br>
	 * _SC_TRACE_EVENT_FILTER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:462</i><br>
	 * _SC_TRACE_INHERIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:464</i><br>
	 * _SC_TRACE_LOG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:467</i><br>
	 * _SC_LEVEL1_ICACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:469</i><br>
	 * _SC_LEVEL1_ICACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:471</i><br>
	 * _SC_LEVEL1_ICACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:473</i><br>
	 * _SC_LEVEL1_DCACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:475</i><br>
	 * _SC_LEVEL1_DCACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:477</i><br>
	 * _SC_LEVEL1_DCACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:479</i><br>
	 * _SC_LEVEL2_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:481</i><br>
	 * _SC_LEVEL2_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:483</i><br>
	 * _SC_LEVEL2_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:485</i><br>
	 * _SC_LEVEL3_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:487</i><br>
	 * _SC_LEVEL3_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:489</i><br>
	 * _SC_LEVEL3_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:491</i><br>
	 * _SC_LEVEL4_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:493</i><br>
	 * _SC_LEVEL4_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:495</i><br>
	 * _SC_LEVEL4_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:499</i><br>
	 * _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:501</i><br>
	 * _SC_RAW_SOCKETS
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:504</i><br>
	 * _SC_V7_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:506</i><br>
	 * _SC_V7_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:508</i><br>
	 * _SC_V7_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:510</i><br>
	 * _SC_V7_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:513</i><br>
	 * _SC_SS_REPL_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:516</i><br>
	 * _SC_TRACE_EVENT_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:518</i><br>
	 * _SC_TRACE_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:520</i><br>
	 * _SC_TRACE_SYS_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:522</i><br>
	 * _SC_TRACE_USER_EVENT_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:525</i><br>
	 * _SC_XOPEN_STREAMS
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:528</i><br>
	 * _SC_THREAD_ROBUST_PRIO_INHERIT
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : bits/confname.h:530</i><br>
	 * _SC_THREAD_ROBUST_PRIO_PROTECT
	 */
	/** The default search path. */
	public static final int _CS_PATH = 0;
	public static final int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;
	public static final int _CS_GNU_LIBC_VERSION = 2;
	public static final int _CS_GNU_LIBPTHREAD_VERSION = 3;
	public static final int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;
	public static final int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;
	public static final int _CS_LFS_CFLAGS = 1000;
	public static final int _CS_LFS_LDFLAGS = 1001;
	public static final int _CS_LFS_LIBS = 1002;
	public static final int _CS_LFS_LINTFLAGS = 1003;
	public static final int _CS_LFS64_CFLAGS = 1004;
	public static final int _CS_LFS64_LDFLAGS = 1005;
	public static final int _CS_LFS64_LIBS = 1006;
	public static final int _CS_LFS64_LINTFLAGS = 1007;
	public static final int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;
	public static final int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;
	public static final int _CS_XBS5_ILP32_OFF32_LIBS = 1102;
	public static final int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;
	public static final int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;
	public static final int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;
	public static final int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;
	public static final int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;
	public static final int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;
	public static final int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;
	public static final int _CS_XBS5_LP64_OFF64_LIBS = 1110;
	public static final int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;
	public static final int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;
	public static final int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;
	public static final int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;
	public static final int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;
	public static final int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;
	public static final int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;
	public static final int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;
	public static final int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;
	public static final int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;
	public static final int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;
	public static final int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;
	public static final int _CS_V6_ENV = 1148;
	public static final int _CS_V7_ENV = 1149;
	/** set 0 .. n can_filter(s) */
	public static final int CAN_RAW_FILTER = 1;
	/** set filter for error frames */
	public static final int CAN_RAW_ERR_FILTER = 2;
	/** local loopback (default:on) */
	public static final int CAN_RAW_LOOPBACK = 3;
	/** receive my own msgs (default:off) */
	public static final int CAN_RAW_RECV_OWN_MSGS = 4;
	public static final int CGW_TYPE_UNSPEC = 0;
	/** CAN->CAN routing */
	public static final int CGW_TYPE_CAN_CAN = 1;
	public static final int __CGW_TYPE_MAX = 2;
	public static final int CGW_UNSPEC = 0;
	/** CAN frame modification binary AND */
	public static final int CGW_MOD_AND = 1;
	/** CAN frame modification binary OR */
	public static final int CGW_MOD_OR = 2;
	/** CAN frame modification binary XOR */
	public static final int CGW_MOD_XOR = 3;
	/** CAN frame modification set alternate values */
	public static final int CGW_MOD_SET = 4;
	/** set data[] XOR checksum into data[index] */
	public static final int CGW_CS_XOR = 5;
	/** set data[] CRC8 checksum into data[index] */
	public static final int CGW_CS_CRC8 = 6;
	/** number of handled CAN frames */
	public static final int CGW_HANDLED = 7;
	/** number of dropped CAN frames */
	public static final int CGW_DROPPED = 8;
	/** ifindex of source network interface */
	public static final int CGW_SRC_IF = 9;
	/** ifindex of destination network interface */
	public static final int CGW_DST_IF = 10;
	/** specify struct can_filter on source CAN device */
	public static final int CGW_FILTER = 11;
	public static final int __CGW_MAX = 12;
	public static final int CGW_CRC8PRF_UNSPEC = 0;
	/** compute one additional u8 value */
	public static final int CGW_CRC8PRF_1U8 = 1;
	/** u8 value table indexed by data[1] & 0xF */
	public static final int CGW_CRC8PRF_16U8 = 2;
	/** (can_id & 0xFF) ^ (can_id >> 8 & 0xFF) */
	public static final int CGW_CRC8PRF_SFFID_XOR = 3;
	public static final int __CGW_CRC8PRF_MAX = 4;
	/** create (cyclic) transmission task */
	public static final int TX_SETUP = 1;
	/** remove (cyclic) transmission task */
	public static final int TX_DELETE = 2;
	/** read properties of (cyclic) transmission task */
	public static final int TX_READ = 3;
	/** send one CAN frame */
	public static final int TX_SEND = 4;
	/** create RX content filter subscription */
	public static final int RX_SETUP = 5;
	/** remove RX content filter subscription */
	public static final int RX_DELETE = 6;
	/** read properties of RX content filter subscription */
	public static final int RX_READ = 7;
	/** reply to TX_READ request */
	public static final int TX_STATUS = 8;
	/** notification on performed transmissions (count=0) */
	public static final int TX_EXPIRED = 9;
	/** reply to RX_READ request */
	public static final int RX_STATUS = 10;
	/** cyclic message is absent */
	public static final int RX_TIMEOUT = 11;
	/** updated CAN frame (detected content change) */
	public static final int RX_CHANGED = 12;
	/**
	 * CAN operational and error states<br>
	 * <i>native declaration : can/netlink.h:47</i><br>
	 * enum values
	 */
	public static interface can_state {
		/**
		 * RX/TX error count < 96<br>
		 * <i>native declaration : can/netlink.h:48</i>
		 */
		public static final int CAN_STATE_ERROR_ACTIVE = 0;
		/**
		 * RX/TX error count < 128<br>
		 * <i>native declaration : can/netlink.h:49</i>
		 */
		public static final int CAN_STATE_ERROR_WARNING = 1;
		/**
		 * RX/TX error count < 256<br>
		 * <i>native declaration : can/netlink.h:50</i>
		 */
		public static final int CAN_STATE_ERROR_PASSIVE = 2;
		/**
		 * RX/TX error count >= 256<br>
		 * <i>native declaration : can/netlink.h:51</i>
		 */
		public static final int CAN_STATE_BUS_OFF = 3;
		/**
		 * Device is stopped<br>
		 * <i>native declaration : can/netlink.h:52</i>
		 */
		public static final int CAN_STATE_STOPPED = 4;
		/**
		 * Device is sleeping<br>
		 * <i>native declaration : can/netlink.h:53</i>
		 */
		public static final int CAN_STATE_SLEEPING = 5;
		/** <i>native declaration : can/netlink.h:54</i> */
		public static final int CAN_STATE_MAX = 6;
	};
	public static final int IFLA_CAN_UNSPEC = 0;
	public static final int IFLA_CAN_BITTIMING = 1;
	public static final int IFLA_CAN_BITTIMING_CONST = 2;
	public static final int IFLA_CAN_CLOCK = 3;
	public static final int IFLA_CAN_STATE = 4;
	public static final int IFLA_CAN_CTRLMODE = 5;
	public static final int IFLA_CAN_RESTART_MS = 6;
	public static final int IFLA_CAN_RESTART = 7;
	public static final int IFLA_CAN_BERR_COUNTER = 8;
	public static final int __IFLA_CAN_MAX = 9;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFDSTADDR = (int)0x8918;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_TIPC = (int)30;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _LFS64_ASYNCHRONOUS_IO = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_DOSTOP = (int)32;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_BUSOFF = (int)0x00000040;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_EFF_FLAG = (int)0x80000000;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_FILE = (int)1;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int F_LOCK = (int)1;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_MUTEX_T = (int)40;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCGLCKTRMIOS = (int)0x5456;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int F_TLOCK = (int)2;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCDELDLCI = (int)0x8981;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SYNCHRONIZED_IO = (int)200809;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CMIN = (int)1;
	/** <i>native declaration : can/gw.h</i> */
	public static final int CGW_FLAGS_CAN_ECHO = (int)0x01;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int F_TEST = (int)3;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_REALTIME_ALARM = (int)8;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_RWLOCKATTR_T = (int)8;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX_CANH_SHORT_TO_BAT = (int)0x05;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_ISOTP = (int)6;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int SEEK_END = (int)2;
	/** <i>native declaration : can/netlink.h</i> */
	public static final int CAN_CTRLMODE_ONE_SHOT = (int)0x08;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCXONC = (int)0x540A;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFENCAP = (int)0x8925;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int FIOASYNC = (int)0x5452;
	/** <i>native declaration : can/gw.h</i> */
	public static final int CGW_MOD_FUNCS = (int)4;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_BARRIERATTR_T = (int)4;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_STUFF = (int)0x04;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SPIN_LOCKS = (int)200809;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_FLUSHWRITE = (int)2;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCADDDLCI = (int)0x8980;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_MONOTONIC = (int)1;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __PTHREAD_MUTEX_HAVE_PREV = (int)1;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_PROFIBUS_FDL = (int)10;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __ILP32_OFFBIG_LDFLAGS = (String)"-m32";
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _LFS_LARGEFILE = (int)1;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFTXQLEN = (int)0x8943;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int SOL_DECNET = (int)261;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_REENTRANT_FUNCTIONS = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_XOPEN2K8 = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCGSOFTCAR = (int)0x5419;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int __POSIX2_THIS_VERSION = (int)200809;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_STOP = (int)4;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int R_OK = (int)4;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_IEEE802154 = (int)36;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_THREAD_CPUTIME_ID = (int)3;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSCTTY = (int)0x540E;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int FIONCLEX = (int)0x5450;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_DATA = (int)0;
	/** <i>native declaration : /usr/include/net/if.h</i> */
	public static final int IFNAMSIZ = (int)16;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int IOCSIZE_SHIFT = (int)((0 + 8) + 8);
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_ENH_I18N = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_BLUETOOTH = (int)31;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int L_SET = (int)0;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_PPPOX = (int)24;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCRTMSG = (int)0x890D;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX_CANL_SHORT_TO_BAT = (int)0x50;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFSLAVE = (int)0x8929;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFCONF = (int)0x8912;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSERGETMULTI = (int)0x545A;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_SLIP = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_ROSE = (int)11;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_PASSCRED = (int)16;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCCONS = (int)0x541D;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int _BITS_PTHREADTYPES_H = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_CRC_DEL = (int)0x18;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_BSD = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_ACK = (int)0x00000020;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _LFS64_STDIO = (int)1;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_BOOTTIME = (int)7;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_LLC = (int)26;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFPFLAGS = (int)0x8934;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int IOCSIZE_MASK = (int)(((1 << 14) - 1) << ((0 + 8) + 8));
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _XOPEN_REALTIME_THREADS = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_CRTL_RX_WARNING = (int)0x04;
	/** <i>native declaration : sys/types.h</i> */
	public static final int _SYS_TYPES_H = (int)1;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CSUSP = (int)('z' & 37);
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int PDP_ENDIAN = (int)3412;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSBRK = (int)0x5409;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_MAX = (int)40;
	/** <i>native declaration : /usr/include/net/if.h</i> */
	public static final int _NET_IF_H = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_AX25 = (int)3;
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _POSIX_V6_LP64_OFF64 = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_BSDCOMPAT = (int)14;
	/** <i>native declaration : time.h</i> */
	public static final int ITIMER_PROF = (int)2;
	/** <i>native declaration : sys/select.h</i> */
	public static final int _SYS_SELECT_H = (int)1;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_SMSBLOCK = (int)12;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFMTU = (int)0x8922;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CWERASE = (int)('w' & 37);
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_SECURITY = (int)14;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_NETLINK = (int)16;
	/** <i>native declaration : sys/types.h</i> */
	public static final int __BIT_TYPES_DEFINED__ = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_NRMASK = (int)((1 << 8) - 1);
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_ASYNCHRONOUS_IO = (int)200809;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_CRTL = (int)0x00000004;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCEXCL = (int)0x540C;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_INET6 = (int)10;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_ASH = (int)18;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_IEEE802154 = (int)36;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_NPROTO = (int)7;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_INTERM = (int)0x12;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _BSD_SOURCE = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_ACK = (int)0x19;
	/** <i>native declaration : can/bcm.h</i> */
	public static final int RX_RTR_FRAME = (int)0x0400;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFMTU = (int)0x8921;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int SOL_AAL = (int)265;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_SVID = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE_EVENT_FILTER = (int)-1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCLINUX = (int)0x541C;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int __LITTLE_ENDIAN = (int)1234;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ISOC99 = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_UNSPEC = (int)0;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ISOC95 = (int)1;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFENCAP = (int)0x8926;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int LITTLE_ENDIAN = (int)1234;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int BIG_ENDIAN = (int)4321;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_KEEPALIVE = (int)9;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MESSAGE_PASSING = (int)200809;
	/** <i>native declaration : bits/uio.h</i> */
	public static final int UIO_MAXIOV = (int)1024;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int IOC_INOUT = (int)((1 | 2) << (((0 + 8) + 8) + 14));
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_NETROM = (int)6;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_SECURITY_ENCRYPTION_NETWORK = (int)24;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _UNISTD_H = (int)1;
	/** <i>native declaration : can/gw.h</i> */
	public static final int CGW_MOD_DLC = (int)0x02;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CLNEXT = (int)('v' & 37);
	/** <i>native declaration : can/bcm.h</i> */
	public static final int RX_FILTER_ID = (int)0x0020;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSPGRP = (int)0x5410;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_APPLETALK = (int)5;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSBRK = (int)0x5427;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SCM_TIMESTAMPING = (int)37;
	/** <i>native declaration : sys/select.h</i> */
	public static final int FD_SETSIZE = (int)1024;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_PRIORITIZED_IO = (int)200809;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_TX = (int)0x80;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_CRTL_TX_PASSIVE = (int)0x20;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_CHOWN_RESTRICTED = (int)0;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_NFC = (int)39;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_ERROR = (int)4;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int STDERR_FILENO = (int)2;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int X_OK = (int)1;
	/** <i>native declaration : can/gw.h</i> */
	public static final int MAX_MODFUNCTIONS = (int)(4 * 3);
	/** <i>native declaration : bits/typesizes.h</i> */
	public static final int _BITS_TYPESIZES_H = (int)1;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX2_LOCALEDEF = (int)200809;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TIMERS = (int)200809;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_READ = (int)2;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCDEVPRIVATE = (int)0x89F0;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSRS485 = (int)0x542F;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGRARP = (int)0x8961;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int __PDP_ENDIAN = (int)3412;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_WANPIPE = (int)25;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSSERIAL = (int)0x541F;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_LOSTARB_UNSPEC = (int)0x00;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_LOCAL = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_DONTROUTE = (int)5;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFDSTADDR = (int)0x8917;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_SFF_MASK = (int)0x000007FF;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_CAR = (int)0x040;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_PACKET = (int)17;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_CPUTIME = (int)0;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCMGET = (int)0x5415;
	/** <i>native declaration : bits/wordsize.h</i> */
	public static final int __WORDSIZE_COMPAT32 = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_CRTL_UNSPEC = (int)0x00;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_ID20_18 = (int)0x06;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCGSID = (int)0x5429;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_XPG2 = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_DLC = (int)0x0B;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CDISCARD = (int)('o' & 37);
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SOL_SOCKET = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_JOB_CONTROL = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_CRTL_RX_OVERFLOW = (int)0x01;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIO_INHERIT = (int)200809;
	/** <i>native declaration : bits/uio.h</i> */
	public static final int _BITS_UIO_H_FOR_SYS_UIO_H = (int)1;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int _ENDIAN_H = (int)1;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_XPG4 = (int)1;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_XPG3 = (int)1;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CRPRNT = (int)('r' & 37);
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_COND_T = (int)48;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_ATTR_T = (int)56;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int FIONBIO = (int)0x5421;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SCM_TIMESTAMP = (int)29;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SCM_TIMESTAMPNS = (int)35;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_BIT1 = (int)0x10;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_BIT0 = (int)0x08;
	/** <i>native declaration : bits/wordsize.h</i> */
	public static final int __WORDSIZE = (int)64;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_IOCTL = (int)64;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __LP64_OFF64_LDFLAGS = (String)"-m64";
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_RNG = (int)0x080;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX2 = (int)1;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_EFF_MASK = (int)0x1FFFFFFF;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX_CANH_SHORT_TO_GND = (int)0x07;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int SOL_IRDA = (int)266;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int SOL_ATM = (int)264;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_PEERNAME = (int)28;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_FILE = (int)1;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFADDR = (int)0x8915;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_PHONET = (int)35;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_NETROM = (int)6;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_SECURITY_ENCRYPTION_TRANSPORT = (int)23;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int IOC_IN = (int)(1 << (((0 + 8) + 8) + 14));
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_RTS = (int)0x004;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFBR = (int)0x8940;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCMBIS = (int)0x5416;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_ID28_21 = (int)0x02;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_RWLOCK_T = (int)56;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_LLC = (int)26;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_REALTIME = (int)0;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MEMORY_PROTECTION = (int)200809;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_BUSERROR = (int)0x00000080;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _XOPEN_SHM = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_RDS = (int)21;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SPAWN = (int)200809;
	/** <i>native declaration : can/bcm.h</i> */
	public static final int RX_NO_AUTOTIMER = (int)0x0080;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_UNSPEC = (int)0x00;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX_IMPLICITLY = (int)1;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_R3964 = (int)9;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_ECONET = (int)19;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_MUTEXATTR_T = (int)4;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFFLAGS = (int)0x8913;
	/** <i>native declaration : can/netlink.h</i> */
	public static final int CAN_CTRLMODE_3_SAMPLES = (int)0x04;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_LOCAL = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_MISC = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SEMAPHORES = (int)200809;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_INV_FILTER = (int)0x20000000;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFLINK = (int)0x8911;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_BARRIER_T = (int)32;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ANSI = (int)1;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_PPP = (int)3;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_UNIX = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCMSET = (int)0x5418;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_TIMESTAMPNS = (int)35;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_BRIDGE = (int)7;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int SOL_PACKET = (int)263;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_SIZEBITS = (int)14;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ATTR_STACKSIZE = (int)200809;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_CRTL_RX_PASSIVE = (int)0x10;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_ACK_DEL = (int)0x1B;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_REALTIME_SIGNALS = (int)200809;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_IRDA = (int)23;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_SPORADIC_SERVER = (int)-1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCVHANGUP = (int)0x5437;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_PRIORITY = (int)12;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_RTR = (int)0x0C;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSETXW = (int)0x5435;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIO_PROTECT = (int)200809;
	/** <i>native declaration : sys/socket.h</i> */
	public static final int _SYS_SOCKET_H = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSETXF = (int)0x5434;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_ROUTE = (int)16;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_DSR = (int)0x100;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_TYPEBITS = (int)8;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MEMLOCK_RANGE = (int)200809;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX_CANL_SHORT_TO_CANH = (int)0x80;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_KEY = (int)15;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MEMLOCK = (int)200809;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_ADVISORY_INFO = (int)200809;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SAVED_IDS = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_LINGER = (int)13;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MONOTONIC_CLOCK = (int)0;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_PPPOX = (int)24;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_RXQ_OVFL = (int)40;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_OVERLOAD = (int)0x20;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _POSIX_SOURCE = (int)1;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_DTR = (int)0x002;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCNXCL = (int)0x540D;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFINDEX = (int)0x8933;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_TTY = (int)0;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFPFLAGS = (int)0x8935;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_ROSE = (int)11;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_RDS = (int)21;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSETSW = (int)0x5403;
	/** <i>native declaration : can.h</i> */
	public static final int SOL_CAN_BASE = (int)100;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_DATA = (int)0x0A;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSARP = (int)0x8955;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSTI = (int)0x5412;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_START = (int)8;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_MONOTONIC_COARSE = (int)6;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_HDLC = (int)13;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCMIWAIT = (int)0x545C;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSETSF = (int)0x5404;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_ASYNC_IO = (int)1;
	/** <i>native declaration : bits/predefs.h</i> */
	public static final int __STDC_IEC_559_COMPLEX__ = (int)1;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFBR = (int)0x8941;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_SGI_CYCLE = (int)10;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int STDIN_FILENO = (int)0;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_BOOTTIME_ALARM = (int)9;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_NO_TRUNC = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_ACCEPTCONN = (int)30;
	/** <i>native declaration : can/gw.h</i> */
	public static final int CGW_MOD_ID = (int)0x01;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFHWADDR = (int)0x8927;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _LFS64_LARGEFILE = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/sockios.h</i> */
	public static final int FIOGETOWN = (int)0x8903;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_RAW = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_ATMSVC = (int)20;
	/** <i>native declaration : bits/uio.h</i> */
	public static final int _BITS_UIO_H = (int)1;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_VERSION = (int)700;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _ATFILE_SOURCE = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int _SS_SIZE = (int)128;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGARP = (int)0x8954;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_REALTIME_COARSE = (int)5;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFADDR = (int)0x8916;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_PASSSEC = (int)34;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ATTR_STACKADDR = (int)200809;
	/** <i>native declaration : /usr/include/net/if.h</i> */
	public static final int IF_NAMESIZE = (int)16;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSWINSZ = (int)0x5414;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_DEBUG = (int)1;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CSTOP = (int)('s' & 37);
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSETAW = (int)0x5407;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_PEERCRED = (int)17;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TIMEOUTS = (int)200809;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCDELRT = (int)0x890C;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_RAW_SOCKETS = (int)200809;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_RCVBUF = (int)8;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSRARP = (int)0x8962;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_CRC_SEQ = (int)0x08;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_ALG = (int)38;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFHWADDR = (int)0x8924;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_RES0 = (int)0x09;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_RES1 = (int)0x0D;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC_HAVE_LONG_LONG = (int)1;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __ILP32_OFFBIG_CFLAGS = (String)"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64";
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int FIOQSIZE = (int)0x5460;
	/** <i>native declaration : bits/endian.h</i> */
	public static final int __BYTE_ORDER = (int)1234;
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _XBS5_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSETAF = (int)0x5408;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_RXRPC = (int)33;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int SEEK_SET = (int)0;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_BLUETOOTH = (int)31;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_RCVBUFFORCE = (int)33;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_CAIF = (int)37;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_UNSPEC = (int)0x00;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_PRIORITY_SCHEDULING = (int)200809;
	/** <i>native declaration : time.h</i> */
	public static final int MAX_CLOCKS = (int)16;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_ISDN = (int)34;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_IUCV = (int)32;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_X25 = (int)9;
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _XBS5_LP64_OFF64 = (int)1;
	/** <i>native declaration : can/gw.h</i> */
	public static final int CGW_FLAGS_CAN_SRC_TSTAMP = (int)0x02;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_SECURITY_AUTHENTICATION = (int)22;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_RCVTIMEO = (int)20;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_6PACK = (int)7;
	/** <i>native declaration : bits/predefs.h</i> */
	public static final int __STDC_IEC_559__ = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_LOSTARB = (int)0x00000002;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFMETRIC = (int)0x891d;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_AX25 = (int)5;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC__ = (int)2;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_FORTIFY_LEVEL = (int)0;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CFLUSH = (int)('o' & 37);
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_DIRBITS = (int)2;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_SNA = (int)22;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ROBUST_PRIO_INHERIT = (int)200809;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_NO_CHECK = (int)11;
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _POSIX_V7_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_DECnet = (int)12;
	/** <i>native declaration : time.h</i> */
	public static final int ITIMER_VIRTUAL = (int)1;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_RTR_FLAG = (int)0x40000000;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX_CANH_NO_WIRE = (int)0x04;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX199309 = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_BROADCAST = (int)6;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCDIFADDR = (int)0x8936;
	/** <i>native declaration : can/netlink.h</i> */
	public static final int CAN_CTRLMODE_LOOPBACK = (int)0x01;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_SNDBUF = (int)7;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int F_OK = (int)0;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_IRDA = (int)11;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_LEGACY = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/sockios.h</i> */
	public static final int SIOCATMARK = (int)0x8905;
	/** <i>native declaration : can/bcm.h</i> */
	public static final int STARTTIMER = (int)0x0002;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_BIT = (int)0x01;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_HCI = (int)15;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _XOPEN_REALTIME = (int)1;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFNETMASK = (int)0x891b;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GNU_LIBRARY__ = (int)6;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_ACTIVE = (int)0x40;
	/** <i>native declaration : bits/byteswap.h</i> */
	public static final int _BITS_BYTESWAP_H = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_NRSHIFT = (int)0;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCADDRT = (int)0x890B;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_IPX = (int)4;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_DLC = (int)8;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CDSUSP = (int)('y' & 37);
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int IOC_OUT = (int)(2 << (((0 + 8) + 8) + 14));
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFMAP = (int)0x8971;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCDRARP = (int)0x8960;
	/** <i>native declaration : can/bcm.h</i> */
	public static final int SETTIMER = (int)0x0001;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSETA = (int)0x5406;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_PROCESS_CPUTIME_ID = (int)2;
	/** <i>native declaration : can/gw.h</i> */
	public static final int CGW_MOD_DATA = (int)0x04;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_DIRMASK = (int)((1 << 2) - 1);
	/** <i>native declaration : can.h</i> */
	public static final int CAN_BCM = (int)2;
	/** <i>native declaration : /usr/include/asm-generic/sockios.h</i> */
	public static final int SIOCGSTAMP = (int)0x8906;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_SYNC_PPP = (int)14;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _SVID_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int FIONREAD = (int)0x541B;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_UNIX = (int)1;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_ST = (int)0x008;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_SR = (int)0x010;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_MARK = (int)36;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __ILP32_OFF32_LDFLAGS = (String)"-m32";
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_MAX = (int)40;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE_INHERIT = (int)-1;
	/** <i>native declaration : sys/ioctl.h</i> */
	public static final int _SYS_IOCTL_H = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_TYPE = (int)3;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_CAN = (int)29;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCGETA = (int)0x5405;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int SOMAXCONN = (int)128;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_RCVLOWAT = (int)18;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCPROTOPRIVATE = (int)0x89E0;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCGETS = (int)0x5401;
	/** <i>native declaration : stddef.h</i> */
	public static final int NULL = (int)0;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_REUSEADDR = (int)2;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX_CANH_SHORT_TO_VCC = (int)0x06;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int FIOCLEX = (int)0x5451;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCGETX = (int)0x5432;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFNAME = (int)0x8910;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCDARP = (int)0x8953;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSBRKP = (int)0x5425;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_ASH = (int)18;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCK_MONOTONIC_RAW = (int)4;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_NFC = (int)39;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_SNDBUFFORCE = (int)32;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSETS = (int)0x5402;
	/** <i>native declaration : time.h</i> */
	public static final int TIMER_ABSTIME = (int)0x01;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCSETX = (int)0x5433;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_ATTACH_FILTER = (int)26;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SHARED_MEMORY_OBJECTS = (int)200809;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_SNDTIMEO = (int)21;
	/** <i>native declaration : can/netlink.h</i> */
	public static final int CAN_CTRLMODE_LISTENONLY = (int)0x02;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCNOTTY = (int)0x5422;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SHELL = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX_CANL_SHORT_TO_GND = (int)0x70;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_IDE = (int)0x05;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_MOUSE = (int)2;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_ID17_13 = (int)0x07;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_NETBEUI = (int)13;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_DIRSHIFT = (int)(((0 + 8) + 8) + 14);
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFFLAGS = (int)0x8914;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __STDC_ISO_10646__ = (int)200009;
	/** <i>native declaration : bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_CONDATTR_T = (int)4;
	/** <i>native declaration : can/bcm.h</i> */
	public static final int TX_COUNTEVT = (int)0x0004;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_ATMPVC = (int)8;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CERASE = (int)177;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_WANPIPE = (int)25;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int SOL_RAW = (int)255;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_NOSTOP = (int)16;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_XCU_VERSION = (int)4;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOGIFINDEX = (int)0x8933;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_SIZEMASK = (int)((1 << 14) - 1);
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_CAN = (int)29;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCCBRK = (int)0x5428;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int NCC = (int)8;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_TIMESTAMPING = (int)37;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_CLOCK_SELECTION = (int)200809;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_IPV6 = (int)200809;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX2_C_DEV = (int)200809;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_STRIP = (int)4;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFCOUNT = (int)0x8938;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_IPX = (int)4;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_RXRPC = (int)33;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFTXQLEN = (int)0x8942;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TCFLSH = (int)0x540B;
	/** <i>native declaration : bits/types.h</i> */
	public static final int _BITS_TYPES_H = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final char _POSIX_VDISABLE = (char)'\0';
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFMETRIC = (int)0x891e;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_ECONET = (int)19;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_ATMPVC = (int)8;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_REGEXP = (int)1;
	/** <i>native declaration : posix_types.h</i> */
	public static final int __FD_SETSIZE = (int)1024;
	/** <i>native declaration : time.h</i> */
	public static final int ITIMER_REAL = (int)0;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX2_SW_DEV = (int)200809;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int SEEK_CUR = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCGSERIAL = (int)0x541E;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCGWINSZ = (int)0x5413;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_NETLINK = (int)16;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TX_TIMEOUT = (int)0x00000001;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSER_TEMT = (int)0x01;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_INET = (int)2;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _POSIX_C_SOURCE = (int)200809;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int STDOUT_FILENO = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_INET6 = (int)10;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_NONE = (int)0;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_ATMSVC = (int)20;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_LE = (int)0x001;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_XOPEN2K = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_ROUTE = (int)16;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCPKT_FLUSHREAD = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _LFS_ASYNCHRONOUS_IO = (int)1;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_ERR_MASK = (int)0x1FFFFFFF;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC_MINOR__ = (int)15;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_TYPEMASK = (int)((1 << 8) - 1);
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int F_ULOCK = (int)0;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_UNSPEC = (int)0;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCOUTQ = (int)0x5411;
	/** <i>native declaration : /usr/include/asm-generic/sockios.h</i> */
	public static final int SIOCSPGRP = (int)0x8902;
	/** <i>native declaration : can/netlink.h</i> */
	public static final int CAN_CTRLMODE_BERR_REPORTING = (int)0x10;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_EOF = (int)0x1A;
	/** <i>native declaration : sys/uio.h</i> */
	public static final int _SYS_UIO_H = (int)1;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int W_OK = (int)2;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final char CSTATUS = (char)'\0';
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE_LOG = (int)-1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT = (int)0x00000008;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_MASC = (int)8;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCKS_MASK = (int)(0 | 1);
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_SIZESHIFT = (int)((0 + 8) + 8);
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _POSIX_V6_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : /usr/include/asm-generic/sockios.h</i> */
	public static final int SIOCGSTAMPNS = (int)0x8907;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX_CANL_SHORT_TO_VCC = (int)0x60;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX2_C_BIND = (int)200809;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSERSETMULTI = (int)0x545B;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_PACKET = (int)17;
	/** <i>native declaration : can/bcm.h</i> */
	public static final int TX_CP_CAN_ID = (int)0x0010;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _FEATURES_H = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_SOF = (int)0x03;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_CAIF = (int)37;
	/** <i>native declaration : time.h</i> */
	public static final int CLOCKS_MONO = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_PEERSEC = (int)31;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_ALG = (int)38;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_KEY = (int)15;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CREPRINT = (int)('r' & 37);
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ATFILE = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int SOL_X25 = (int)262;
	/** <i>native declaration : bits/time.h</i> */
	public static final int _STRUCT_TIMEVAL = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSLCKTRMIOS = (int)0x5457;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX_CANL_NO_WIRE = (int)0x40;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCGPGRP = (int)0x540F;
	/** <i>native declaration : can/bcm.h</i> */
	public static final int RX_CHECK_DLC = (int)0x0040;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CTIME = (int)0;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX2_VERSION = (int)200809;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_AX25 = (int)3;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_FSYNC = (int)200809;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFNAME = (int)0x8923;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int __BIG_ENDIAN = (int)4321;
	/** <i>native declaration : bits/sockaddr.h</i> */
	public static final int _BITS_SOCKADDR_H = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_UNIX = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_DECnet = (int)12;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX2_CHAR_TERM = (int)200809;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_OOBINLINE = (int)10;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_CRYPT = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_DOMAIN = (int)39;
	/** <i>native declaration : can/raw.h</i> */
	public static final int SOL_CAN_RAW = (int)(100 + 1);
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_NETBEUI = (int)13;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final char CBRK = (char)'\0';
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX199506 = (int)1;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_SRTR = (int)0x04;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CINTR = (int)('c' & 37);
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_DETACH_FILTER = (int)27;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __LP64_OFF64_CFLAGS = (String)"-m64";
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX_VERSION = (int)200809;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CSTART = (int)('q' & 37);
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_RI = (int)0x080;
	/** <i>native declaration : can/bcm.h</i> */
	public static final int TX_ANNOUNCE = (int)0x0008;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCGICOUNT = (int)0x545D;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_SPORADIC_SERVER = (int)-1;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_NRBITS = (int)8;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_CRTL_TX_OVERFLOW = (int)0x02;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCMBIC = (int)0x5417;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFSLAVE = (int)0x8930;
	/** <i>native declaration : can/gw.h</i> */
	public static final int CGW_FRAME_MODS = (int)3;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREADS = (int)200809;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int BYTE_ORDER = (int)1234;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_MCNET = (int)5;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_SAFE_FUNCTIONS = (int)200809;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_ERR_FLAG = (int)0x20000000;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSERGSTRUCT = (int)0x5458;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFMEM = (int)0x891f;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_MAPPED_FILES = (int)200809;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCADDMULTI = (int)0x8931;
	/** <i>native declaration : /usr/include/asm-generic/sockios.h</i> */
	public static final int SIOCGPGRP = (int)0x8904;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_ISDN = (int)34;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCDELMULTI = (int)0x8932;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCPKT = (int)0x5420;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_PHONET = (int)35;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_CPUTIME = (int)0;
	/** <i>native declaration : can/bcm.h</i> */
	public static final int TX_RESET_MULTI_IDX = (int)0x0200;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCGETD = (int)0x5424;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int N_X25 = (int)6;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_INET = (int)2;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSERSWILD = (int)0x5455;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX = (int)0x00000010;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int L_INCR = (int)1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_BRIDGE = (int)7;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_BINDTODEVICE = (int)25;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CEOT = (int)('d' & 37);
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_CD = (int)0x040;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_BARRIERS = (int)200809;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final char CEOL = (char)'\0';
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CEOF = (int)('d' & 37);
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSERGWILD = (int)0x5454;
	/** <i>native declaration : bits/sigset.h</i> */
	public static final int _SIGSET_H_types = (int)1;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFHWBROADCAST = (int)0x8937;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFMEM = (int)0x8920;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_SNDLOWAT = (int)19;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_ID04_00 = (int)0x0E;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_CRTL_TX_WARNING = (int)0x08;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_RESTARTED = (int)0x00000100;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSERGETLSR = (int)0x5459;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_TIMESTAMP = (int)29;
	/** <i>native declaration : /usr/include/asm-generic/sockios.h</i> */
	public static final int FIOSETOWN = (int)0x8901;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PROCESS_SHARED = (int)200809;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIORITY_SCHEDULING = (int)200809;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_SNA = (int)22;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE = (int)-1;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CQUIT = (int)34;
	/** <i>native declaration : bits/environments.h</i> */
	public static final String __ILP32_OFF32_CFLAGS = (String)"-m32";
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_WRITE = (int)1;
	/** <i>native declaration : socket.h</i> */
	public static final int _K_SS_MAXSIZE = (int)128;
	/** <i>native declaration : sys/ttydefaults.h</i> */
	public static final int CKILL = (int)('u' & 37);
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_LOC_ID12_05 = (int)0x0F;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int __FLOAT_WORD_ORDER = (int)1234;
	/** <i>native declaration : sys/sysmacros.h</i> */
	public static final int _SYS_SYSMACROS_H = (int)1;
	/** <i>native declaration : sys/cdefs.h</i> */
	public static final int _SYS_CDEFS_H = (int)1;
	/** <i>native declaration : /usr/include/net/if.h</i> */
	public static final int IFHWADDRLEN = (int)6;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSERCONFIG = (int)0x5453;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ROBUST_PRIO_PROTECT = (int)-1;
	/** <i>native declaration : /usr/include/asm-generic/ioctl.h</i> */
	public static final int _IOC_TYPESHIFT = (int)(0 + 8);
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_APPLETALK = (int)5;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _BITS_POSIX_OPT_H = (int)1;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSETD = (int)0x5423;
	/** <i>native declaration : bits/environments.h</i> */
	public static final int _POSIX_V7_LP64_OFF64 = (int)1;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_TYPED_MEMORY_OBJECTS = (int)-1;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_IRDA = (int)23;
	/** <i>native declaration : bits/posix_opt.h</i> */
	public static final int _POSIX_READER_WRITER_LOCKS = (int)200809;
	/** <i>native declaration : can/bcm.h</i> */
	public static final int RX_ANNOUNCE_RESUME = (int)0x0100;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFBRDADDR = (int)0x891a;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFBRDADDR = (int)0x8919;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCGRS485 = (int)0x542E;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_SECURITY = (int)14;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_IUCV = (int)32;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_TP16 = (int)3;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCSIFNETMASK = (int)0x891c;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCSSOFTCAR = (int)0x541A;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_TRX_UNSPEC = (int)0x00;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int L_XTND = (int)2;
	/** <i>native declaration : /usr/include/asm-generic/ioctls.h</i> */
	public static final int TIOCINQ = (int)0x541B;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int AF_TIPC = (int)30;
	/** <i>native declaration : bits/socket.h</i> */
	public static final int PF_X25 = (int)9;
	/** <i>native declaration : bits/ioctl-types.h</i> */
	public static final int TIOCM_CTS = (int)0x020;
	/** <i>native declaration : can/error.h</i> */
	public static final int CAN_ERR_PROT_FORM = (int)0x02;
	/** <i>native declaration : bits/ioctls.h</i> */
	public static final int SIOCGIFMAP = (int)0x8970;
	/** <i>native declaration : can.h</i> */
	public static final int CAN_TP20 = (int)4;
	/** <i>native declaration : /usr/include/asm-generic/socket.h</i> */
	public static final int SO_PROTOCOL = (int)38;
	/** <i>native declaration : posix_types.h</i> */
	public interface __kernel_sighandler_t extends Callback {
		void apply(int int1);
	};
	/**
	 * Original signature : <code>int gnu_dev_major(unsigned long long)</code><br>
	 * <i>native declaration : sys/sysmacros.h:9</i>
	 */
	int gnu_dev_major(NativeLong __dev);
	/**
	 * Original signature : <code>int gnu_dev_minor(unsigned long long)</code><br>
	 * <i>native declaration : sys/sysmacros.h:12</i>
	 */
	int gnu_dev_minor(NativeLong __dev);
	/**
	 * Original signature : <code>long long gnu_dev_makedev(unsigned int, unsigned int)</code><br>
	 * <i>native declaration : sys/sysmacros.h:15</i>
	 */
	NativeLong gnu_dev_makedev(int __major, int __minor);
	/**
	 * Read from another process' address space.<br>
	 * Original signature : <code>ssize_t process_vm_readv(pid_t, iovec*, unsigned long, iovec*, unsigned long, unsigned long)</code><br>
	 * <i>native declaration : bits/uio.h:32</i>
	 */
	NativeLong process_vm_readv(int __pid, iovec __lvec, NativeLong __liovcnt, iovec __rvec, NativeLong __riovcnt, NativeLong __flags);
	/**
	 * Write to another process' address space.<br>
	 * Original signature : <code>ssize_t process_vm_writev(pid_t, iovec*, unsigned long, iovec*, unsigned long, unsigned long)</code><br>
	 * <i>native declaration : bits/uio.h:40</i>
	 */
	NativeLong process_vm_writev(int __pid, iovec __lvec, NativeLong __liovcnt, iovec __rvec, NativeLong __riovcnt, NativeLong __flags);
	/**
	 * Read data from file descriptor FD, and put the result in the<br>
	 * buffers described by IOVEC, which is a vector of COUNT 'struct iovec's.<br>
	 * The buffers are filled in the order specified.<br>
	 * Operates just like 'read' (see <unistd.h>) except that data are<br>
	 * put in IOVEC instead of a contiguous buffer.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t readv(int, iovec*, int)</code><br>
	 * <i>native declaration : sys/uio.h:38</i>
	 */
	NativeLong readv(int __fd, iovec __iovec, int __count);
	/**
	 * Write data pointed by the buffers described by IOVEC, which<br>
	 * is a vector of COUNT 'struct iovec's, to file descriptor FD.<br>
	 * The data is written in the order specified.<br>
	 * Operates just like 'write' (see <unistd.h>) except that the data<br>
	 * are taken from IOVEC instead of a contiguous buffer.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t writev(int, iovec*, int)</code><br>
	 * <i>native declaration : sys/uio.h:49</i>
	 */
	NativeLong writev(int __fd, iovec __iovec, int __count);
	/**
	 * Read data from file descriptor FD at the given position OFFSET<br>
	 * without change the file pointer, and put the result in the buffers<br>
	 * described by IOVEC, which is a vector of COUNT 'struct iovec's.<br>
	 * The buffers are filled in the order specified.  Operates just like<br>
	 * 'pread' (see <unistd.h>) except that data are put in IOVEC instead<br>
	 * of a contiguous buffer.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t preadv(int, iovec*, int, __off_t)</code><br>
	 * <i>native declaration : sys/uio.h:64</i>
	 */
	NativeLong preadv(int __fd, iovec __iovec, int __count, NativeLong __offset);
	/**
	 * Write data pointed by the buffers described by IOVEC, which is a<br>
	 * vector of COUNT 'struct iovec's, to file descriptor FD at the given<br>
	 * position OFFSET without change the file pointer.  The data is<br>
	 * written in the order specified.  Operates just like 'pwrite' (see<br>
	 * <unistd.h>) except that the data are taken from IOVEC instead of a<br>
	 * contiguous buffer.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pwritev(int, iovec*, int, __off_t)</code><br>
	 * <i>native declaration : sys/uio.h:76</i>
	 */
	NativeLong pwritev(int __fd, iovec __iovec, int __count, NativeLong __offset);
	/**
	 * Original signature : <code>cmsghdr* __cmsg_nxthdr(msghdr*, cmsghdr*)</code><br>
	 * <i>native declaration : bits/socket.h:244</i>
	 */
	cmsghdr __cmsg_nxthdr(msghdr __mhdr, cmsghdr __cmsg);
	/**
	 * Receive up to VLEN messages as described by VMESSAGES from socket FD.<br>
	 * Returns the number of bytes read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int recvmmsg(int, mmsghdr*, unsigned int, int, timespec*)</code><br>
	 * <i>native declaration : bits/socket.h:291</i>
	 */
	int recvmmsg(int __fd, CLibrary.mmsghdr __vmessages, int __vlen, int __flags, timespec __tmo);
	/**
	 * Send a VLEN messages as described by VMESSAGES to socket FD.<br>
	 * Return the number of datagrams successfully written or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sendmmsg(int, mmsghdr*, unsigned int, int)</code><br>
	 * <i>native declaration : bits/socket.h:299</i>
	 */
	int sendmmsg(int __fd, CLibrary.mmsghdr __vmessages, int __vlen, int __flags);
	/**
	 * Create a new socket of type TYPE in domain DOMAIN, using<br>
	 * protocol PROTOCOL.  If PROTOCOL is zero, one is chosen automatically.<br>
	 * Returns a file descriptor for the new socket, or -1 for errors.<br>
	 * Original signature : <code>int socket(int, int, int)</code><br>
	 * <i>native declaration : sys/socket.h:99</i>
	 */
	int socket(int __domain, int __type, int __protocol);
	/**
	 * Create two new sockets, of type TYPE in domain DOMAIN and using<br>
	 * protocol PROTOCOL, which are connected to each other, and put file<br>
	 * descriptors for them in FDS[0] and FDS[1].  If PROTOCOL is zero,<br>
	 * one will be chosen automatically.  Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int socketpair(int, int, int, int[2])</code><br>
	 * <i>native declaration : sys/socket.h:105</i><br>
	 * @deprecated use the safer methods {@link #socketpair(int, int, int, java.nio.IntBuffer)} and {@link #socketpair(int, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int socketpair(int __domain, int __type, int __protocol, IntByReference __fds);
	/**
	 * Create two new sockets, of type TYPE in domain DOMAIN and using<br>
	 * protocol PROTOCOL, which are connected to each other, and put file<br>
	 * descriptors for them in FDS[0] and FDS[1].  If PROTOCOL is zero,<br>
	 * one will be chosen automatically.  Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int socketpair(int, int, int, int[2])</code><br>
	 * <i>native declaration : sys/socket.h:105</i>
	 */
	int socketpair(int __domain, int __type, int __protocol, IntBuffer __fds);
	/**
	 * Give the socket FD the local address ADDR (which is LEN bytes long).<br>
	 * Original signature : <code>int bind(int, sockaddr*, socklen_t)</code><br>
	 * <i>native declaration : sys/socket.h:109</i>
	 */
	int bind(int __fd, sockaddr __addr, int __len);
	/**
	 * Put the local address of FD into *ADDR and its length in *LEN.<br>
	 * Original signature : <code>int getsockname(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : sys/socket.h:113</i><br>
	 * @deprecated use the safer methods {@link #getsockname(int, c.sockaddr, java.nio.IntBuffer)} and {@link #getsockname(int, c.sockaddr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getsockname(int __fd, sockaddr __addr, IntByReference __len);
	/**
	 * Put the local address of FD into *ADDR and its length in *LEN.<br>
	 * Original signature : <code>int getsockname(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : sys/socket.h:113</i>
	 */
	int getsockname(int __fd, sockaddr __addr, IntBuffer __len);
	/**
	 * Open a connection on socket FD to peer at ADDR (which LEN bytes long).<br>
	 * For connectionless socket types, just set the default address to send to<br>
	 * and the only address from which to accept transmissions.<br>
	 * Return 0 on success, -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int connect(int, sockaddr*, socklen_t)</code><br>
	 * <i>native declaration : sys/socket.h:123</i>
	 */
	int connect(int __fd, sockaddr __addr, int __len);
	/**
	 * Put the address of the peer connected to socket FD into *ADDR<br>
	 * (which is *LEN bytes long), and its actual length into *LEN.<br>
	 * Original signature : <code>int getpeername(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : sys/socket.h:127</i><br>
	 * @deprecated use the safer methods {@link #getpeername(int, c.sockaddr, java.nio.IntBuffer)} and {@link #getpeername(int, c.sockaddr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getpeername(int __fd, sockaddr __addr, IntByReference __len);
	/**
	 * Put the address of the peer connected to socket FD into *ADDR<br>
	 * (which is *LEN bytes long), and its actual length into *LEN.<br>
	 * Original signature : <code>int getpeername(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : sys/socket.h:127</i>
	 */
	int getpeername(int __fd, sockaddr __addr, IntBuffer __len);
	/**
	 * Send N bytes of BUF to socket FD.  Returns the number sent or -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t send(int, __const void*, size_t, int)</code><br>
	 * <i>native declaration : sys/socket.h:135</i>
	 */
	NativeLong send(int __fd, Pointer __buf, NativeSize __n, int __flags);
	/**
	 * Read N bytes into BUF from socket FD.<br>
	 * Returns the number read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t recv(int, void*, size_t, int)</code><br>
	 * <i>native declaration : sys/socket.h:142</i>
	 */
	NativeLong recv(int __fd, Pointer __buf, NativeSize __n, int __flags);
	/**
	 * Send N bytes of BUF on socket FD to peer at address ADDR (which is<br>
	 * ADDR_LEN bytes long).  Returns the number sent, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t sendto(int, __const void*, size_t, int, sockaddr*, socklen_t)</code><br>
	 * <i>native declaration : sys/socket.h:149</i>
	 */
	NativeLong sendto(int __fd, Pointer __buf, NativeSize __n, int __flags, sockaddr __addr, int __addr_len);
	/**
	 * Read N bytes into BUF through socket FD.<br>
	 * If ADDR is not NULL, fill in *ADDR_LEN bytes of it with tha address of<br>
	 * the sender, and store the actual size of the address in *ADDR_LEN.<br>
	 * Returns the number of bytes read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t recvfrom(int, void*, size_t, int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : sys/socket.h:160</i><br>
	 * @deprecated use the safer methods {@link #recvfrom(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, int, c.sockaddr, java.nio.IntBuffer)} and {@link #recvfrom(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, int, c.sockaddr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	NativeLong recvfrom(int __fd, Pointer __buf, NativeSize __n, int __flags, sockaddr __addr, IntByReference __addr_len);
	/**
	 * Read N bytes into BUF through socket FD.<br>
	 * If ADDR is not NULL, fill in *ADDR_LEN bytes of it with tha address of<br>
	 * the sender, and store the actual size of the address in *ADDR_LEN.<br>
	 * Returns the number of bytes read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t recvfrom(int, void*, size_t, int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : sys/socket.h:160</i>
	 */
	NativeLong recvfrom(int __fd, Pointer __buf, NativeSize __n, int __flags, sockaddr __addr, IntBuffer __addr_len);
	/**
	 * Send a message described MESSAGE on socket FD.<br>
	 * Returns the number of bytes sent, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t sendmsg(int, msghdr*, int)</code><br>
	 * <i>native declaration : sys/socket.h:170</i>
	 */
	NativeLong sendmsg(int __fd, msghdr __message, int __flags);
	/**
	 * Receive a message as described by MESSAGE from socket FD.<br>
	 * Returns the number of bytes read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t recvmsg(int, msghdr*, int)</code><br>
	 * <i>native declaration : sys/socket.h:178</i>
	 */
	NativeLong recvmsg(int __fd, msghdr __message, int __flags);
	/**
	 * Put the current value for socket FD's option OPTNAME at protocol level LEVEL<br>
	 * into OPTVAL (which is *OPTLEN bytes long), and set *OPTLEN to the value's<br>
	 * actual length.  Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int getsockopt(int, int, int, void*, socklen_t*)</code><br>
	 * <i>native declaration : sys/socket.h:184</i><br>
	 * @deprecated use the safer methods {@link #getsockopt(int, int, int, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getsockopt(int, int, int, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getsockopt(int __fd, int __level, int __optname, Pointer __optval, IntByReference __optlen);
	/**
	 * Put the current value for socket FD's option OPTNAME at protocol level LEVEL<br>
	 * into OPTVAL (which is *OPTLEN bytes long), and set *OPTLEN to the value's<br>
	 * actual length.  Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int getsockopt(int, int, int, void*, socklen_t*)</code><br>
	 * <i>native declaration : sys/socket.h:184</i>
	 */
	int getsockopt(int __fd, int __level, int __optname, Pointer __optval, IntBuffer __optlen);
	/**
	 * Set socket FD's option OPTNAME at protocol level LEVEL<br>
	 * to *OPTVAL (which is OPTLEN bytes long).<br>
	 * Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int setsockopt(int, int, int, __const void*, socklen_t)</code><br>
	 * <i>native declaration : sys/socket.h:191</i>
	 */
	int setsockopt(int __fd, int __level, int __optname, Pointer __optval, int __optlen);
	/**
	 * Prepare to accept connections on socket FD.<br>
	 * N connection requests will be queued before further requests are refused.<br>
	 * Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int listen(int, int)</code><br>
	 * <i>native declaration : sys/socket.h:198</i>
	 */
	int listen(int __fd, int __n);
	/**
	 * Await a connection on socket FD.<br>
	 * When a connection arrives, open a new socket to communicate with it,<br>
	 * set *ADDR (which is *ADDR_LEN bytes long) to the address of the connecting<br>
	 * peer and *ADDR_LEN to the address's actual length, and return the<br>
	 * new socket's descriptor, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int accept(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : sys/socket.h:208</i><br>
	 * @deprecated use the safer methods {@link #accept(int, c.sockaddr, java.nio.IntBuffer)} and {@link #accept(int, c.sockaddr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int accept(int __fd, sockaddr __addr, IntByReference __addr_len);
	/**
	 * Await a connection on socket FD.<br>
	 * When a connection arrives, open a new socket to communicate with it,<br>
	 * set *ADDR (which is *ADDR_LEN bytes long) to the address of the connecting<br>
	 * peer and *ADDR_LEN to the address's actual length, and return the<br>
	 * new socket's descriptor, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int accept(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : sys/socket.h:208</i>
	 */
	int accept(int __fd, sockaddr __addr, IntBuffer __addr_len);
	/**
	 * Shut down all or part of the connection open on socket FD.<br>
	 * HOW determines what to shut down:<br>
	 * SHUT_RD   = No more receptions;<br>
	 * SHUT_WR   = No more transmissions;<br>
	 * SHUT_RDWR = No more receptions or transmissions.<br>
	 * Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int shutdown(int, int)</code><br>
	 * <i>native declaration : sys/socket.h:226</i>
	 */
	int shutdown(int __fd, int __how);
	/**
	 * Determine wheter socket is at a out-of-band mark.<br>
	 * Original signature : <code>int sockatmark(int)</code><br>
	 * <i>native declaration : sys/socket.h:231</i>
	 */
	int sockatmark(int __fd);
	/**
	 * FDTYPE is S_IFSOCK or another S_IF* macro defined in <sys/stat.h>;<br>
	 * returns 1 if FD is open on an object of the indicated type, 0 if not,<br>
	 * or -1 for errors (setting errno).<br>
	 * Original signature : <code>int isfdtype(int, int)</code><br>
	 * <i>native declaration : sys/socket.h:239</i>
	 */
	int isfdtype(int __fd, int __fdtype);
	/**
	 * Convert an interface name to an index, and vice versa.<br>
	 * Original signature : <code>int if_nametoindex(__const char*)</code><br>
	 * <i>native declaration : /usr/include/net/if.h:192</i><br>
	 * @deprecated use the safer methods {@link #if_nametoindex(java.lang.String)} and {@link #if_nametoindex(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int if_nametoindex(Pointer __ifname);
	/**
	 * Convert an interface name to an index, and vice versa.<br>
	 * Original signature : <code>int if_nametoindex(__const char*)</code><br>
	 * <i>native declaration : /usr/include/net/if.h:192</i>
	 */
	int if_nametoindex(String __ifname);
	/**
	 * Original signature : <code>char* if_indextoname(unsigned int, char*)</code><br>
	 * <i>native declaration : /usr/include/net/if.h:193</i><br>
	 * @deprecated use the safer methods {@link #if_indextoname(int, java.nio.ByteBuffer)} and {@link #if_indextoname(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer if_indextoname(int __ifindex, Pointer __ifname);
	/**
	 * Original signature : <code>char* if_indextoname(unsigned int, char*)</code><br>
	 * <i>native declaration : /usr/include/net/if.h:193</i>
	 */
	Pointer if_indextoname(int __ifindex, ByteBuffer __ifname);
	/**
	 * Return a list of all interfaces and their indices.<br>
	 * Original signature : <code>if_nameindex* if_nameindex()</code><br>
	 * <i>native declaration : /usr/include/net/if.h:196</i>
	 */
	if_nameindex if_nameindex();
	/**
	 * Free the data returned from if_nameindex.<br>
	 * Original signature : <code>void if_freenameindex(if_nameindex*)</code><br>
	 * <i>native declaration : /usr/include/net/if.h:199</i>
	 */
	void if_freenameindex(if_nameindex __ptr);
	/**
	 * Test for access to NAME using the real UID and real GID.<br>
	 * Original signature : <code>int access(__const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:61</i><br>
	 * @deprecated use the safer methods {@link #access(java.lang.String, int)} and {@link #access(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int access(Pointer __name, int __type);
	/**
	 * Test for access to NAME using the real UID and real GID.<br>
	 * Original signature : <code>int access(__const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:61</i>
	 */
	int access(String __name, int __type);
	/**
	 * Test for access to FILE relative to the directory FD is open on.<br>
	 * If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess',<br>
	 * otherwise use real IDs like `access'.<br>
	 * Original signature : <code>int faccessat(int, __const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:78</i><br>
	 * @deprecated use the safer methods {@link #faccessat(int, java.lang.String, int, int)} and {@link #faccessat(int, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int faccessat(int __fd, Pointer __file, int __type, int __flag);
	/**
	 * Test for access to FILE relative to the directory FD is open on.<br>
	 * If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess',<br>
	 * otherwise use real IDs like `access'.<br>
	 * Original signature : <code>int faccessat(int, __const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:78</i>
	 */
	int faccessat(int __fd, String __file, int __type, int __flag);
	/**
	 * Original signature : <code>__off_t lseek(int, __off_t, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:108</i>
	 */
	NativeLong lseek(int __fd, NativeLong __offset, int __whence);
	/**
	 * Close the file descriptor FD.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int close(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:127</i>
	 */
	int close(int __fd);
	/**
	 * Read NBYTES into BUF from FD.  Return the<br>
	 * number read, -1 for errors or 0 for EOF.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t read(int, void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:134</i>
	 */
	NativeLong read(int __fd, Pointer __buf, NativeSize __nbytes);
	/**
	 * Write N bytes of BUF to FD.  Return the number written, or -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t write(int, __const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:140</i>
	 */
	NativeLong write(int __fd, Pointer __buf, NativeSize __n);
	/**
	 * Read NBYTES into BUF from FD at the given position OFFSET without<br>
	 * changing the file pointer.  Return the number read, -1 for errors<br>
	 * or 0 for EOF.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pread(int, void*, size_t, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:150</i>
	 */
	NativeLong pread(int __fd, Pointer __buf, NativeSize __nbytes, NativeLong __offset);
	/**
	 * Write N bytes of BUF to FD at the given position OFFSET without<br>
	 * changing the file pointer.  Return the number written, or -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pwrite(int, __const void*, size_t, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:158</i>
	 */
	NativeLong pwrite(int __fd, Pointer __buf, NativeSize __n, NativeLong __offset);
	/**
	 * Create a one-way communication channel (pipe).<br>
	 * If successful, two file descriptors are stored in PIPEDES;<br>
	 * bytes written on PIPEDES[1] can be read from PIPEDES[0].<br>
	 * Returns 0 if successful, -1 if not.<br>
	 * Original signature : <code>int pipe(int[2])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:191</i><br>
	 * @deprecated use the safer methods {@link #pipe(java.nio.IntBuffer)} and {@link #pipe(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pipe(IntByReference __pipedes);
	/**
	 * Create a one-way communication channel (pipe).<br>
	 * If successful, two file descriptors are stored in PIPEDES;<br>
	 * bytes written on PIPEDES[1] can be read from PIPEDES[0].<br>
	 * Returns 0 if successful, -1 if not.<br>
	 * Original signature : <code>int pipe(int[2])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:191</i>
	 */
	int pipe(IntBuffer __pipedes);
	/**
	 * Schedule an alarm.  In SECONDS seconds, the process will get a SIGALRM.<br>
	 * If SECONDS is zero, any currently scheduled alarm will be cancelled.<br>
	 * The function returns the number of seconds remaining until the last<br>
	 * alarm scheduled would have signaled, or zero if there wasn't one.<br>
	 * There is no return value to indicate an error, but you can set `errno'<br>
	 * to 0 and check its value after calling `alarm', and this might tell you.<br>
	 * The signal may come late due to processor scheduling.<br>
	 * Original signature : <code>int alarm(unsigned int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:206</i>
	 */
	int alarm(int __seconds);
	/**
	 * Make the process sleep for SECONDS seconds, or until a signal arrives<br>
	 * and is not ignored.  The function returns the number of seconds less<br>
	 * than SECONDS which it actually slept (thus zero if it slept the full time).<br>
	 * If a signal handler does a `longjmp' or modifies the handling of the<br>
	 * SIGALRM signal while inside `sleep' call, the handling of the SIGALRM<br>
	 * signal afterwards is undefined.  There is no return value to indicate<br>
	 * error, but if `sleep' returns SECONDS, it probably didn't work.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sleep(unsigned int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:218</i>
	 */
	int sleep(int __seconds);
	/**
	 * Set an alarm to go off (generating a SIGALRM signal) in VALUE<br>
	 * microseconds.  If INTERVAL is nonzero, when the alarm goes off, the<br>
	 * timer is reset to go off every INTERVAL microseconds thereafter.<br>
	 * Returns the number of microseconds remaining before the alarm.<br>
	 * Original signature : <code>__useconds_t ualarm(__useconds_t, __useconds_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:226</i>
	 */
	int ualarm(int __value, int __interval);
	/**
	 * Sleep USECONDS microseconds, or until a signal arrives that is not blocked<br>
	 * or ignored.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int usleep(__useconds_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:234</i>
	 */
	int usleep(int __useconds);
	/**
	 * Suspend the process until a signal arrives.<br>
	 * This always returns -1 and sets `errno' to EINTR.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int pause()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:243</i>
	 */
	int pause();
	/**
	 * Change the owner and group of FILE.<br>
	 * Original signature : <code>int chown(__const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:247</i><br>
	 * @deprecated use the safer methods {@link #chown(java.lang.String, int, int)} and {@link #chown(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int chown(Pointer __file, int __owner, int __group);
	/**
	 * Change the owner and group of FILE.<br>
	 * Original signature : <code>int chown(__const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:247</i>
	 */
	int chown(String __file, int __owner, int __group);
	/**
	 * Change the owner and group of the file that FD is open on.<br>
	 * Original signature : <code>int fchown(int, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:252</i>
	 */
	int fchown(int __fd, int __owner, int __group);
	/**
	 * Change owner and group of FILE, if it is a symbolic<br>
	 * link the ownership of the symbolic link is changed.<br>
	 * Original signature : <code>int lchown(__const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:257</i><br>
	 * @deprecated use the safer methods {@link #lchown(java.lang.String, int, int)} and {@link #lchown(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int lchown(Pointer __file, int __owner, int __group);
	/**
	 * Change owner and group of FILE, if it is a symbolic<br>
	 * link the ownership of the symbolic link is changed.<br>
	 * Original signature : <code>int lchown(__const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:257</i>
	 */
	int lchown(String __file, int __owner, int __group);
	/**
	 * Change the owner and group of FILE relative to the directory FD is open<br>
	 * on.<br>
	 * Original signature : <code>int fchownat(int, __const char*, __uid_t, __gid_t, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:265</i><br>
	 * @deprecated use the safer methods {@link #fchownat(int, java.lang.String, int, int, int)} and {@link #fchownat(int, com.sun.jna.Pointer, int, int, int)} instead
	 */
	@Deprecated 
	int fchownat(int __fd, Pointer __file, int __owner, int __group, int __flag);
	/**
	 * Change the owner and group of FILE relative to the directory FD is open<br>
	 * on.<br>
	 * Original signature : <code>int fchownat(int, __const char*, __uid_t, __gid_t, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:265</i>
	 */
	int fchownat(int __fd, String __file, int __owner, int __group, int __flag);
	/**
	 * Change the process's working directory to PATH.<br>
	 * Original signature : <code>int chdir(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:271</i><br>
	 * @deprecated use the safer methods {@link #chdir(java.lang.String)} and {@link #chdir(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int chdir(Pointer __path);
	/**
	 * Change the process's working directory to PATH.<br>
	 * Original signature : <code>int chdir(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:271</i>
	 */
	int chdir(String __path);
	/**
	 * Change the process's working directory to the one FD is open on.<br>
	 * Original signature : <code>int fchdir(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:275</i>
	 */
	int fchdir(int __fd);
	/**
	 * Get the pathname of the current working directory,<br>
	 * and put it in SIZE bytes of BUF.  Returns NULL if the<br>
	 * directory couldn't be determined or SIZE was too small.<br>
	 * If successful, returns BUF.  In GNU, if BUF is NULL,<br>
	 * an array is allocated with `malloc'; the array is SIZE<br>
	 * bytes long, unless SIZE == 0, in which case it is as<br>
	 * big as necessary.<br>
	 * Original signature : <code>char* getcwd(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:285</i><br>
	 * @deprecated use the safer methods {@link #getcwd(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #getcwd(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer getcwd(Pointer __buf, NativeSize __size);
	/**
	 * Get the pathname of the current working directory,<br>
	 * and put it in SIZE bytes of BUF.  Returns NULL if the<br>
	 * directory couldn't be determined or SIZE was too small.<br>
	 * If successful, returns BUF.  In GNU, if BUF is NULL,<br>
	 * an array is allocated with `malloc'; the array is SIZE<br>
	 * bytes long, unless SIZE == 0, in which case it is as<br>
	 * big as necessary.<br>
	 * Original signature : <code>char* getcwd(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:285</i>
	 */
	Pointer getcwd(ByteBuffer __buf, NativeSize __size);
	/**
	 * Put the absolute pathname of the current working directory in BUF.<br>
	 * If successful, return BUF.  If not, put an error message in<br>
	 * BUF and return NULL.  BUF should be at least PATH_MAX bytes long.<br>
	 * Original signature : <code>char* getwd(char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:299</i><br>
	 * @deprecated use the safer methods {@link #getwd(java.nio.ByteBuffer)} and {@link #getwd(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getwd(Pointer __buf);
	/**
	 * Put the absolute pathname of the current working directory in BUF.<br>
	 * If successful, return BUF.  If not, put an error message in<br>
	 * BUF and return NULL.  BUF should be at least PATH_MAX bytes long.<br>
	 * Original signature : <code>char* getwd(char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:299</i>
	 */
	Pointer getwd(ByteBuffer __buf);
	/**
	 * Duplicate FD, returning a new file descriptor on the same file.<br>
	 * Original signature : <code>int dup(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:305</i>
	 */
	int dup(int __fd);
	/**
	 * Duplicate FD to FD2, closing FD2 and making it open on the same file.<br>
	 * Original signature : <code>int dup2(int, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:308</i>
	 */
	int dup2(int __fd, int __fd2);
	/**
	 * Replace the current process, executing PATH with arguments ARGV and<br>
	 * environment ENVP.  ARGV and ENVP are terminated by NULL pointers.<br>
	 * Original signature : <code>int execve(__const char*, const char*[], const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:325</i><br>
	 * @deprecated use the safer methods {@link #execve(java.lang.String, java.lang.String[], java.lang.String[])} and {@link #execve(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execve(Pointer __path, PointerByReference __argv, PointerByReference __envp);
	/**
	 * Replace the current process, executing PATH with arguments ARGV and<br>
	 * environment ENVP.  ARGV and ENVP are terminated by NULL pointers.<br>
	 * Original signature : <code>int execve(__const char*, const char*[], const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:325</i>
	 */
	int execve(String __path, String __argv[], String __envp[]);
	/**
	 * Execute the file FD refers to, overlaying the running program image.<br>
	 * ARGV and ENVP are passed to the new program, as for `execve'.<br>
	 * Original signature : <code>int fexecve(int, const char*[], const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:331</i><br>
	 * @deprecated use the safer methods {@link #fexecve(int, java.lang.String[], java.lang.String[])} and {@link #fexecve(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int fexecve(int __fd, PointerByReference __argv, PointerByReference __envp);
	/**
	 * Execute the file FD refers to, overlaying the running program image.<br>
	 * ARGV and ENVP are passed to the new program, as for `execve'.<br>
	 * Original signature : <code>int fexecve(int, const char*[], const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:331</i>
	 */
	int fexecve(int __fd, String __argv[], String __envp[]);
	/**
	 * Execute PATH with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execv(__const char*, const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:337</i><br>
	 * @deprecated use the safer methods {@link #execv(java.lang.String, java.lang.String[])} and {@link #execv(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execv(Pointer __path, PointerByReference __argv);
	/**
	 * Execute PATH with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execv(__const char*, const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:337</i>
	 */
	int execv(String __path, String __argv[]);
	/**
	 * Execute PATH with all arguments after PATH until a NULL pointer,<br>
	 * and the argument after that for environment.<br>
	 * Original signature : <code>int execle(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:342</i><br>
	 * @deprecated use the safer methods {@link #execle(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execle(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execle(Pointer __path, Pointer __arg, Object... varargs);
	/**
	 * Execute PATH with all arguments after PATH until a NULL pointer,<br>
	 * and the argument after that for environment.<br>
	 * Original signature : <code>int execle(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:342</i>
	 */
	int execle(String __path, String __arg, Object... varargs);
	/**
	 * Execute PATH with all arguments after PATH until<br>
	 * a NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execl(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:347</i><br>
	 * @deprecated use the safer methods {@link #execl(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execl(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execl(Pointer __path, Pointer __arg, Object... varargs);
	/**
	 * Execute PATH with all arguments after PATH until<br>
	 * a NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execl(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:347</i>
	 */
	int execl(String __path, String __arg, Object... varargs);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if it contains<br>
	 * no slashes, with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execvp(__const char*, const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:352</i><br>
	 * @deprecated use the safer methods {@link #execvp(java.lang.String, java.lang.String[])} and {@link #execvp(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execvp(Pointer __file, PointerByReference __argv);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if it contains<br>
	 * no slashes, with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execvp(__const char*, const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:352</i>
	 */
	int execvp(String __file, String __argv[]);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if<br>
	 * it contains no slashes, with all arguments after FILE until a<br>
	 * NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execlp(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:358</i><br>
	 * @deprecated use the safer methods {@link #execlp(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execlp(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execlp(Pointer __file, Pointer __arg, Object... varargs);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if<br>
	 * it contains no slashes, with all arguments after FILE until a<br>
	 * NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execlp(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:358</i>
	 */
	int execlp(String __file, String __arg, Object... varargs);
	/**
	 * Add INC to priority of the current process.<br>
	 * Original signature : <code>int nice(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:372</i>
	 */
	int nice(int __inc);
	/**
	 * Terminate program execution with the low-order 8 bits of STATUS.<br>
	 * Original signature : <code>void _exit(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:377</i>
	 */
	void _exit(int __status);
	/**
	 * Get file-specific configuration information about PATH.<br>
	 * Original signature : <code>long pathconf(__const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:476</i><br>
	 * @deprecated use the safer methods {@link #pathconf(java.lang.String, int)} and {@link #pathconf(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	NativeLong pathconf(Pointer __path, int __name);
	/**
	 * Get file-specific configuration information about PATH.<br>
	 * Original signature : <code>long pathconf(__const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:476</i>
	 */
	NativeLong pathconf(String __path, int __name);
	/**
	 * Get file-specific configuration about descriptor FD.<br>
	 * Original signature : <code>long fpathconf(int, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:480</i>
	 */
	NativeLong fpathconf(int __fd, int __name);
	/**
	 * Get the value of the system variable NAME.<br>
	 * Original signature : <code>long sysconf(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:483</i>
	 */
	NativeLong sysconf(int __name);
	/**
	 * Get the value of the string-valued system variable NAME.<br>
	 * Original signature : <code>size_t confstr(int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:487</i><br>
	 * @deprecated use the safer methods {@link #confstr(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #confstr(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	NativeSize confstr(int __name, Pointer __buf, NativeSize __len);
	/**
	 * Get the value of the string-valued system variable NAME.<br>
	 * Original signature : <code>size_t confstr(int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:487</i>
	 */
	NativeSize confstr(int __name, ByteBuffer __buf, NativeSize __len);
	/**
	 * Get the process ID of the calling process.<br>
	 * Original signature : <code>__pid_t getpid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:492</i>
	 */
	int getpid();
	/**
	 * Get the process ID of the calling process's parent.<br>
	 * Original signature : <code>__pid_t getppid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:495</i>
	 */
	int getppid();
	/**
	 * Original signature : <code>__pid_t getpgrp()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:500</i>
	 */
	int getpgrp();
	/**
	 * Get the process group ID of process PID.<br>
	 * Original signature : <code>__pid_t __getpgid(__pid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:510</i>
	 */
	int __getpgid(int __pid);
	/**
	 * Original signature : <code>__pid_t getpgid(__pid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:512</i>
	 */
	int getpgid(int __pid);
	/**
	 * Set the process group ID of the process matching PID to PGID.<br>
	 * If PID is zero, the current process's process group ID is set.<br>
	 * If PGID is zero, the process ID of the process is used.<br>
	 * Original signature : <code>int setpgid(__pid_t, __pid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:519</i>
	 */
	int setpgid(int __pid, int __pgid);
	/**
	 * Set the process group ID of the calling process to its own PID.<br>
	 * This is exactly the same as `setpgid (0, 0)'.<br>
	 * Original signature : <code>int setpgrp()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:536</i>
	 */
	int setpgrp();
	/**
	 * Create a new session with the calling process as its leader.<br>
	 * The process group IDs of the session and the calling process<br>
	 * are set to the process ID of the calling process, which is returned.<br>
	 * Original signature : <code>__pid_t setsid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:553</i>
	 */
	int setsid();
	/**
	 * Return the session ID of the given process.<br>
	 * Original signature : <code>__pid_t getsid(__pid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:557</i>
	 */
	int getsid(int __pid);
	/**
	 * Get the real user ID of the calling process.<br>
	 * Original signature : <code>__uid_t getuid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:561</i>
	 */
	int getuid();
	/**
	 * Get the effective user ID of the calling process.<br>
	 * Original signature : <code>__uid_t geteuid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:564</i>
	 */
	int geteuid();
	/**
	 * Get the real group ID of the calling process.<br>
	 * Original signature : <code>__gid_t getgid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:567</i>
	 */
	int getgid();
	/**
	 * Get the effective group ID of the calling process.<br>
	 * Original signature : <code>__gid_t getegid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:570</i>
	 */
	int getegid();
	/**
	 * If SIZE is zero, return the number of supplementary groups<br>
	 * the calling process is in.  Otherwise, fill in the group IDs<br>
	 * of its supplementary groups in LIST and return the number written.<br>
	 * Original signature : <code>int getgroups(int, __gid_t[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:575</i><br>
	 * @deprecated use the safer methods {@link #getgroups(int, java.nio.IntBuffer)} and {@link #getgroups(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getgroups(int __size, IntByReference __list);
	/**
	 * If SIZE is zero, return the number of supplementary groups<br>
	 * the calling process is in.  Otherwise, fill in the group IDs<br>
	 * of its supplementary groups in LIST and return the number written.<br>
	 * Original signature : <code>int getgroups(int, __gid_t[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:575</i>
	 */
	int getgroups(int __size, IntBuffer __list);
	/**
	 * Set the user ID of the calling process to UID.<br>
	 * If the calling process is the super-user, set the real<br>
	 * and effective user IDs, and the saved set-user-ID to UID;<br>
	 * if not, the effective user ID is set to UID.<br>
	 * Original signature : <code>int setuid(__uid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:586</i>
	 */
	int setuid(int __uid);
	/**
	 * Set the real user ID of the calling process to RUID,<br>
	 * and the effective user ID of the calling process to EUID.<br>
	 * Original signature : <code>int setreuid(__uid_t, __uid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:591</i>
	 */
	int setreuid(int __ruid, int __euid);
	/**
	 * Set the effective user ID of the calling process to UID.<br>
	 * Original signature : <code>int seteuid(__uid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:596</i>
	 */
	int seteuid(int __uid);
	/**
	 * Set the group ID of the calling process to GID.<br>
	 * If the calling process is the super-user, set the real<br>
	 * and effective group IDs, and the saved set-group-ID to GID;<br>
	 * if not, the effective group ID is set to GID.<br>
	 * Original signature : <code>int setgid(__gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:603</i>
	 */
	int setgid(int __gid);
	/**
	 * Set the real group ID of the calling process to RGID,<br>
	 * and the effective group ID of the calling process to EGID.<br>
	 * Original signature : <code>int setregid(__gid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:608</i>
	 */
	int setregid(int __rgid, int __egid);
	/**
	 * Set the effective group ID of the calling process to GID.<br>
	 * Original signature : <code>int setegid(__gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:613</i>
	 */
	int setegid(int __gid);
	/**
	 * Clone the calling process, creating an exact copy.<br>
	 * Return -1 for errors, 0 to the new process,<br>
	 * and the process ID of the new process to the old process.<br>
	 * Original signature : <code>__pid_t fork()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:642</i>
	 */
	int fork();
	/**
	 * Clone the calling process, but without copying the whole address space.<br>
	 * The calling process is suspended until the new process exits or is<br>
	 * replaced by a call to `execve'.  Return -1 for errors, 0 to the new process,<br>
	 * and the process ID of the new process to the old process.<br>
	 * Original signature : <code>__pid_t vfork()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:650</i>
	 */
	int vfork();
	/**
	 * Return the pathname of the terminal FD is open on, or NULL on errors.<br>
	 * The returned storage is good only until the next call to this function.<br>
	 * Original signature : <code>char* ttyname(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:656</i>
	 */
	Pointer ttyname(int __fd);
	/**
	 * Store at most BUFLEN characters of the pathname of the terminal FD is<br>
	 * open on in BUF.  Return 0 on success, otherwise an error number.<br>
	 * Original signature : <code>int ttyname_r(int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:660</i><br>
	 * @deprecated use the safer methods {@link #ttyname_r(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #ttyname_r(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int ttyname_r(int __fd, Pointer __buf, NativeSize __buflen);
	/**
	 * Store at most BUFLEN characters of the pathname of the terminal FD is<br>
	 * open on in BUF.  Return 0 on success, otherwise an error number.<br>
	 * Original signature : <code>int ttyname_r(int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:660</i>
	 */
	int ttyname_r(int __fd, ByteBuffer __buf, NativeSize __buflen);
	/**
	 * Return 1 if FD is a valid descriptor associated<br>
	 * with a terminal, zero if not.<br>
	 * Original signature : <code>int isatty(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:665</i>
	 */
	int isatty(int __fd);
	/**
	 * Return the index into the active-logins file (utmp) for<br>
	 * the controlling terminal.<br>
	 * Original signature : <code>int ttyslot()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:671</i>
	 */
	int ttyslot();
	/**
	 * Make a link to FROM named TO.<br>
	 * Original signature : <code>int link(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:676</i><br>
	 * @deprecated use the safer methods {@link #link(java.lang.String, java.lang.String)} and {@link #link(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int link(Pointer __from, Pointer __to);
	/**
	 * Make a link to FROM named TO.<br>
	 * Original signature : <code>int link(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:676</i>
	 */
	int link(String __from, String __to);
	/**
	 * Like link but relative paths in TO and FROM are interpreted relative<br>
	 * to FROMFD and TOFD respectively.<br>
	 * Original signature : <code>int linkat(int, __const char*, int, __const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:682</i><br>
	 * @deprecated use the safer methods {@link #linkat(int, java.lang.String, int, java.lang.String, int)} and {@link #linkat(int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int linkat(int __fromfd, Pointer __from, int __tofd, Pointer __to, int __flags);
	/**
	 * Like link but relative paths in TO and FROM are interpreted relative<br>
	 * to FROMFD and TOFD respectively.<br>
	 * Original signature : <code>int linkat(int, __const char*, int, __const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:682</i>
	 */
	int linkat(int __fromfd, String __from, int __tofd, String __to, int __flags);
	/**
	 * Make a symbolic link to FROM named TO.<br>
	 * Original signature : <code>int symlink(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:689</i><br>
	 * @deprecated use the safer methods {@link #symlink(java.lang.String, java.lang.String)} and {@link #symlink(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int symlink(Pointer __from, Pointer __to);
	/**
	 * Make a symbolic link to FROM named TO.<br>
	 * Original signature : <code>int symlink(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:689</i>
	 */
	int symlink(String __from, String __to);
	/**
	 * Read the contents of the symbolic link PATH into no more than<br>
	 * LEN bytes of BUF.  The contents are not null-terminated.<br>
	 * Returns the number of characters read, or -1 for errors.<br>
	 * Original signature : <code>ssize_t readlink(__const char*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:695</i><br>
	 * @deprecated use the safer methods {@link #readlink(java.lang.String, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #readlink(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	NativeLong readlink(Pointer __path, Pointer __buf, NativeSize __len);
	/**
	 * Read the contents of the symbolic link PATH into no more than<br>
	 * LEN bytes of BUF.  The contents are not null-terminated.<br>
	 * Returns the number of characters read, or -1 for errors.<br>
	 * Original signature : <code>ssize_t readlink(__const char*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:695</i>
	 */
	NativeLong readlink(String __path, ByteBuffer __buf, NativeSize __len);
	/**
	 * Like symlink but a relative path in TO is interpreted relative to TOFD.<br>
	 * Original signature : <code>int symlinkat(__const char*, int, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:702</i><br>
	 * @deprecated use the safer methods {@link #symlinkat(java.lang.String, int, java.lang.String)} and {@link #symlinkat(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int symlinkat(Pointer __from, int __tofd, Pointer __to);
	/**
	 * Like symlink but a relative path in TO is interpreted relative to TOFD.<br>
	 * Original signature : <code>int symlinkat(__const char*, int, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:702</i>
	 */
	int symlinkat(String __from, int __tofd, String __to);
	/**
	 * Like readlink but a relative PATH is interpreted relative to FD.<br>
	 * Original signature : <code>ssize_t readlinkat(int, __const char*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:706</i><br>
	 * @deprecated use the safer methods {@link #readlinkat(int, java.lang.String, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #readlinkat(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	NativeLong readlinkat(int __fd, Pointer __path, Pointer __buf, NativeSize __len);
	/**
	 * Like readlink but a relative PATH is interpreted relative to FD.<br>
	 * Original signature : <code>ssize_t readlinkat(int, __const char*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:706</i>
	 */
	NativeLong readlinkat(int __fd, String __path, ByteBuffer __buf, NativeSize __len);
	/**
	 * Remove the link NAME.<br>
	 * Original signature : <code>int unlink(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:712</i><br>
	 * @deprecated use the safer methods {@link #unlink(java.lang.String)} and {@link #unlink(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int unlink(Pointer __name);
	/**
	 * Remove the link NAME.<br>
	 * Original signature : <code>int unlink(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:712</i>
	 */
	int unlink(String __name);
	/**
	 * Remove the link NAME relative to FD.<br>
	 * Original signature : <code>int unlinkat(int, __const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:716</i><br>
	 * @deprecated use the safer methods {@link #unlinkat(int, java.lang.String, int)} and {@link #unlinkat(int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int unlinkat(int __fd, Pointer __name, int __flag);
	/**
	 * Remove the link NAME relative to FD.<br>
	 * Original signature : <code>int unlinkat(int, __const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:716</i>
	 */
	int unlinkat(int __fd, String __name, int __flag);
	/**
	 * Remove the directory PATH.<br>
	 * Original signature : <code>int rmdir(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:721</i><br>
	 * @deprecated use the safer methods {@link #rmdir(java.lang.String)} and {@link #rmdir(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int rmdir(Pointer __path);
	/**
	 * Remove the directory PATH.<br>
	 * Original signature : <code>int rmdir(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:721</i>
	 */
	int rmdir(String __path);
	/**
	 * Return the foreground process group ID of FD.<br>
	 * Original signature : <code>__pid_t tcgetpgrp(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:725</i>
	 */
	int tcgetpgrp(int __fd);
	/**
	 * Set the foreground process group ID of FD set PGRP_ID.<br>
	 * Original signature : <code>int tcsetpgrp(int, __pid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:728</i>
	 */
	int tcsetpgrp(int __fd, int __pgrp_id);
	/**
	 * Return the login name of the user.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* getlogin()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:735</i>
	 */
	Pointer getlogin();
	/**
	 * Return at most NAME_LEN characters of the login name of the user in NAME.<br>
	 * If it cannot be determined or some other error occurred, return the error<br>
	 * code.  Otherwise return 0.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getlogin_r(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:743</i><br>
	 * @deprecated use the safer methods {@link #getlogin_r(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #getlogin_r(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int getlogin_r(Pointer __name, NativeSize __name_len);
	/**
	 * Return at most NAME_LEN characters of the login name of the user in NAME.<br>
	 * If it cannot be determined or some other error occurred, return the error<br>
	 * code.  Otherwise return 0.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getlogin_r(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:743</i>
	 */
	int getlogin_r(ByteBuffer __name, NativeSize __name_len);
	/**
	 * Set the login name returned by `getlogin'.<br>
	 * Original signature : <code>int setlogin(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:748</i><br>
	 * @deprecated use the safer methods {@link #setlogin(java.lang.String)} and {@link #setlogin(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int setlogin(Pointer __name);
	/**
	 * Set the login name returned by `getlogin'.<br>
	 * Original signature : <code>int setlogin(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:748</i>
	 */
	int setlogin(String __name);
	/**
	 * Many other libraries have conflicting prototypes for getopt, with<br>
	 * differences in the consts, in stdlib.h.  To avoid compilation<br>
	 * errors, only prototype getopt for the GNU C library.<br>
	 * Original signature : <code>int getopt(int, const char**, const char*)</code><br>
	 * <i>native declaration : /usr/include/getopt.h:152</i><br>
	 * @deprecated use the safer methods {@link #getopt(int, java.lang.String[], java.lang.String)} and {@link #getopt(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int getopt(int ___argc, PointerByReference ___argv, Pointer __shortopts);
	/**
	 * Many other libraries have conflicting prototypes for getopt, with<br>
	 * differences in the consts, in stdlib.h.  To avoid compilation<br>
	 * errors, only prototype getopt for the GNU C library.<br>
	 * Original signature : <code>int getopt(int, const char**, const char*)</code><br>
	 * <i>native declaration : /usr/include/getopt.h:152</i>
	 */
	int getopt(int ___argc, String ___argv[], String __shortopts);
	/**
	 * Put the name of the current host in no more than LEN bytes of NAME.<br>
	 * The result is null-terminated if LEN is large enough for the full<br>
	 * name and the terminator.<br>
	 * Original signature : <code>int gethostname(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:720</i><br>
	 * @deprecated use the safer methods {@link #gethostname(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #gethostname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int gethostname(Pointer __name, NativeSize __len);
	/**
	 * Put the name of the current host in no more than LEN bytes of NAME.<br>
	 * The result is null-terminated if LEN is large enough for the full<br>
	 * name and the terminator.<br>
	 * Original signature : <code>int gethostname(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:720</i>
	 */
	int gethostname(ByteBuffer __name, NativeSize __len);
	/**
	 * Set the name of the current host to NAME, which is LEN bytes long.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostname(__const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:727</i><br>
	 * @deprecated use the safer methods {@link #sethostname(java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #sethostname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int sethostname(Pointer __name, NativeSize __len);
	/**
	 * Set the name of the current host to NAME, which is LEN bytes long.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostname(__const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:727</i>
	 */
	int sethostname(String __name, NativeSize __len);
	/**
	 * Set the current machine's Internet number to ID.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostid(long)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:732</i>
	 */
	int sethostid(NativeLong __id);
	/**
	 * Get and set the NIS (aka YP) domain name, if any.<br>
	 * Called just like `gethostname' and `sethostname'.<br>
	 * The NIS domain name is usually the empty string when not using NIS.<br>
	 * Original signature : <code>int getdomainname(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:738</i><br>
	 * @deprecated use the safer methods {@link #getdomainname(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #getdomainname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int getdomainname(Pointer __name, NativeSize __len);
	/**
	 * Get and set the NIS (aka YP) domain name, if any.<br>
	 * Called just like `gethostname' and `sethostname'.<br>
	 * The NIS domain name is usually the empty string when not using NIS.<br>
	 * Original signature : <code>int getdomainname(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:738</i>
	 */
	int getdomainname(ByteBuffer __name, NativeSize __len);
	/**
	 * Original signature : <code>int setdomainname(__const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:740</i><br>
	 * @deprecated use the safer methods {@link #setdomainname(java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #setdomainname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int setdomainname(Pointer __name, NativeSize __len);
	/**
	 * Original signature : <code>int setdomainname(__const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:740</i>
	 */
	int setdomainname(String __name, NativeSize __len);
	/**
	 * Revoke access permissions to all processes currently communicating<br>
	 * with the control terminal, and then send a SIGHUP signal to the process<br>
	 * group of the control terminal.<br>
	 * Original signature : <code>int vhangup()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:747</i>
	 */
	int vhangup();
	/**
	 * Revoke the access of all descriptors currently open on FILE.<br>
	 * Original signature : <code>int revoke(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:750</i><br>
	 * @deprecated use the safer methods {@link #revoke(java.lang.String)} and {@link #revoke(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int revoke(Pointer __file);
	/**
	 * Revoke the access of all descriptors currently open on FILE.<br>
	 * Original signature : <code>int revoke(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:750</i>
	 */
	int revoke(String __file);
	/**
	 * Enable statistical profiling, writing samples of the PC into at most<br>
	 * SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling<br>
	 * is enabled, the system examines the user PC and increments<br>
	 * SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,<br>
	 * disable profiling.  Returns zero on success, -1 on error.<br>
	 * Original signature : <code>int profil(unsigned short*, size_t, size_t, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:758</i><br>
	 * @deprecated use the safer methods {@link #profil(java.nio.ShortBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} and {@link #profil(com.sun.jna.ptr.ShortByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} instead
	 */
	@Deprecated 
	int profil(ShortByReference __sample_buffer, NativeSize __size, NativeSize __offset, int __scale);
	/**
	 * Enable statistical profiling, writing samples of the PC into at most<br>
	 * SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling<br>
	 * is enabled, the system examines the user PC and increments<br>
	 * SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,<br>
	 * disable profiling.  Returns zero on success, -1 on error.<br>
	 * Original signature : <code>int profil(unsigned short*, size_t, size_t, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:758</i>
	 */
	int profil(ShortBuffer __sample_buffer, NativeSize __size, NativeSize __offset, int __scale);
	/**
	 * Turn accounting on if NAME is an existing file.  The system will then write<br>
	 * a record for each process as it terminates, to this file.  If NAME is NULL,<br>
	 * turn accounting off.  This call is restricted to the super-user.<br>
	 * Original signature : <code>int acct(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:766</i><br>
	 * @deprecated use the safer methods {@link #acct(java.lang.String)} and {@link #acct(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int acct(Pointer __name);
	/**
	 * Turn accounting on if NAME is an existing file.  The system will then write<br>
	 * a record for each process as it terminates, to this file.  If NAME is NULL,<br>
	 * turn accounting off.  This call is restricted to the super-user.<br>
	 * Original signature : <code>int acct(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:766</i>
	 */
	int acct(String __name);
	/**
	 * Successive calls return the shells listed in `/etc/shells'.<br>
	 * Original signature : <code>char* getusershell()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:770</i>
	 */
	Pointer getusershell();
	/**
	 * Discard cached info.<br>
	 * Original signature : <code>void endusershell()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:771</i>
	 */
	void endusershell();
	/**
	 * Rewind and re-read the file.<br>
	 * Original signature : <code>void setusershell()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:772</i>
	 */
	void setusershell();
	/**
	 * Put the program in the background, and dissociate from the controlling<br>
	 * terminal.  If NOCHDIR is zero, do `chdir ("/")'.  If NOCLOSE is zero,<br>
	 * redirects stdin, stdout, and stderr to /dev/null.<br>
	 * Original signature : <code>int daemon(int, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:778</i>
	 */
	int daemon(int __nochdir, int __noclose);
	/**
	 * Make PATH be the root directory (the starting point for absolute paths).<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int chroot(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:785</i><br>
	 * @deprecated use the safer methods {@link #chroot(java.lang.String)} and {@link #chroot(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int chroot(Pointer __path);
	/**
	 * Make PATH be the root directory (the starting point for absolute paths).<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int chroot(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:785</i>
	 */
	int chroot(String __path);
	/**
	 * Prompt with PROMPT and read a string from the terminal without echoing.<br>
	 * Uses /dev/tty if possible; otherwise stderr and stdin.<br>
	 * Original signature : <code>char* getpass(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:789</i><br>
	 * @deprecated use the safer methods {@link #getpass(java.lang.String)} and {@link #getpass(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getpass(Pointer __prompt);
	/**
	 * Prompt with PROMPT and read a string from the terminal without echoing.<br>
	 * Uses /dev/tty if possible; otherwise stderr and stdin.<br>
	 * Original signature : <code>char* getpass(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:789</i>
	 */
	Pointer getpass(String __prompt);
	/**
	 * Make all changes done to FD actually appear on disk.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int fsync(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:798</i>
	 */
	int fsync(int __fd);
	/**
	 * Return identifier for the current host.<br>
	 * Original signature : <code>long gethostid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:812</i>
	 */
	NativeLong gethostid();
	/**
	 * Make all changes done to all files actually appear on disk.<br>
	 * Original signature : <code>void sync()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:815</i>
	 */
	void sync();
	/**
	 * Return the number of bytes in a page.  This is the system's page size,<br>
	 * which is not necessarily the same as the hardware page size.<br>
	 * Original signature : <code>int getpagesize()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:821</i>
	 */
	int getpagesize();
	/**
	 * Return the maximum number of file descriptors<br>
	 * the current process could possibly have.<br>
	 * Original signature : <code>int getdtablesize()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:826</i>
	 */
	int getdtablesize();
	/**
	 * Original signature : <code>int truncate(__const char*, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:836</i><br>
	 * @deprecated use the safer methods {@link #truncate(java.lang.String, com.sun.jna.NativeLong)} and {@link #truncate(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int truncate(Pointer __file, NativeLong __length);
	/**
	 * Original signature : <code>int truncate(__const char*, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:836</i>
	 */
	int truncate(String __file, NativeLong __length);
	/**
	 * Original signature : <code>int ftruncate(int, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:858</i>
	 */
	int ftruncate(int __fd, NativeLong __length);
	/**
	 * Set the end of accessible data space (aka "the break") to ADDR.<br>
	 * Returns zero on success and -1 for errors (with errno set).<br>
	 * Original signature : <code>int brk(void*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:879</i>
	 */
	int brk(Pointer __addr);
	/**
	 * Increase or decrease the end of accessible data space by DELTA bytes.<br>
	 * If successful, returns the address the previous end of data space<br>
	 * (i.e. the beginning of the new space, if DELTA > 0);<br>
	 * returns (void *) -1 for errors (with errno set).<br>
	 * Original signature : <code>void* sbrk(intptr_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:885</i><br>
	 * @deprecated use the safer methods {@link #sbrk(java.nio.IntBuffer)} and {@link #sbrk(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer sbrk(IntByReference __delta);
	/**
	 * Increase or decrease the end of accessible data space by DELTA bytes.<br>
	 * If successful, returns the address the previous end of data space<br>
	 * (i.e. the beginning of the new space, if DELTA > 0);<br>
	 * returns (void *) -1 for errors (with errno set).<br>
	 * Original signature : <code>void* sbrk(intptr_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:885</i>
	 */
	Pointer sbrk(IntBuffer __delta);
	/**
	 * Invoke `system call' number SYSNO, passing it the remaining arguments.<br>
	 * This is completely system-dependent, and not often useful.<br>
	 * In Unix, `syscall' sets `errno' for all errors and most calls return -1<br>
	 * for errors; in many systems you cannot pass arguments or get return<br>
	 * values for all system calls (`pipe', `fork', and `getppid' typically<br>
	 * among them).<br>
	 * In Mach, all system calls take normal arguments and always return an<br>
	 * error code (zero for success).<br>
	 * Original signature : <code>long syscall(long, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:900</i>
	 */
	NativeLong syscall(NativeLong __sysno, Object... varargs);
	/**
	 * Original signature : <code>int lockf(int, int, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:923</i>
	 */
	int lockf(int __fd, int __cmd, NativeLong __len);
	/**
	 * Synchronize at least the data part of a file with the underlying<br>
	 * media.<br>
	 * Original signature : <code>int fdatasync(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:954</i>
	 */
	int fdatasync(int __fildes);
	/**
	 * Return the name of the controlling terminal.<br>
	 * Original signature : <code>char* ctermid(char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:983</i><br>
	 * @deprecated use the safer methods {@link #ctermid(java.nio.ByteBuffer)} and {@link #ctermid(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ctermid(Pointer __s);
	/**
	 * Return the name of the controlling terminal.<br>
	 * Original signature : <code>char* ctermid(char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:983</i>
	 */
	Pointer ctermid(ByteBuffer __s);
	/**
	 * Perform the I/O control operation specified by REQUEST on FD.<br>
	 * One argument may follow; its presence and type depend on REQUEST.<br>
	 * Return value depends on REQUEST.  Usually -1 indicates error.<br>
	 * Original signature : <code>int ioctl(int, unsigned long, null)</code><br>
	 * <i>native declaration : sys/ioctl.h:40</i>
	 */
	int ioctl(int __fd, NativeLong __request, Object... varargs);
	public static final GlobalPointerType<ByteByReference > optarg = new GlobalPointerType<ByteByReference >(CLibrary.JNA_NATIVE_LIB, ByteByReference.class, "optarg");
	public static final GlobalInt optind = new GlobalInt(CLibrary.JNA_NATIVE_LIB, "optind");
	public static final GlobalInt opterr = new GlobalInt(CLibrary.JNA_NATIVE_LIB, "opterr");
	public static final GlobalInt optopt = new GlobalInt(CLibrary.JNA_NATIVE_LIB, "optopt");
	public static class mmsghdr extends PointerType {
		public mmsghdr(Pointer address) {
			super(address);
		}
		public mmsghdr() {
			super();
		}
	};
	public static class iface extends PointerType {
		public iface(Pointer address) {
			super(address);
		}
		public iface() {
			super();
		}
	};
}
