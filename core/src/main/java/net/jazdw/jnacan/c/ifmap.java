package net.jazdw.jnacan.c;

import java.util.Arrays;
import java.util.List;

import com.sun.jna.NativeLong;
import com.sun.jna.Structure;
/**
 * <i>native declaration : /usr/include/net/if.h:110</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ifmap extends Structure {
	public NativeLong mem_start;
	public NativeLong mem_end;
	public short base_addr;
	public byte irq;
	public byte dma;
	public byte port;
	public ifmap() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("mem_start", "mem_end", "base_addr", "irq", "dma", "port");
	}
	public ifmap(NativeLong mem_start, NativeLong mem_end, short base_addr, byte irq, byte dma, byte port) {
		super();
		this.mem_start = mem_start;
		this.mem_end = mem_end;
		this.base_addr = base_addr;
		this.irq = irq;
		this.dma = dma;
		this.port = port;
	}
	public static class ByReference extends ifmap implements Structure.ByReference {
		
	};
	public static class ByValue extends ifmap implements Structure.ByValue {
		
	};
}
