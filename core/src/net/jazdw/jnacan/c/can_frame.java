package net.jazdw.jnacan.c;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * struct can_frame - basic CAN frame structure<br>
 * @can_id:  the CAN ID of the frame and CAN_*_FLAG flags, see above.<br>
 * @can_dlc: the data length field of the CAN frame<br>
 * @data:    the CAN frame payload.<br>
 * <i>native declaration : can.h:54</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class can_frame extends Structure {
	/**
	 * 32 bit CAN_ID + EFF/RTR/ERR flags<br>
	 * C type : canid_t
	 */
	public int can_id;
	/**
	 * data length code: 0 .. 8<br>
	 * C type : __u8
	 */
	public byte can_dlc;
	
	/**
	 * Work around for aligning data to 8 bytes
	 */
	public byte[] padding = new byte[3];
    
	/** C type : __u8[8] */
	public byte[] data = new byte[8];
	
	public can_frame() {
		super();
	}
	public can_frame(Pointer ptr) {
        super(ptr);
    }
	protected List<? > getFieldOrder() {
		return Arrays.asList("can_id", "can_dlc", "padding", "data");
	}
	/**
	 * @param can_id 32 bit CAN_ID + EFF/RTR/ERR flags<br>
	 * C type : canid_t<br>
	 * @param can_dlc data length code: 0 .. 8<br>
	 * C type : __u8<br>
	 * @param data C type : __u8[8]
	 */
	public can_frame(int can_id, byte can_dlc, byte data[]) {
		super();
		this.can_id = can_id;
		this.can_dlc = can_dlc;
		if ((data.length != this.data.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.data = data;
	}
	public static class ByReference extends can_frame implements Structure.ByReference {
		
	};
	public static class ByValue extends can_frame implements Structure.ByValue {
		
	};
}
